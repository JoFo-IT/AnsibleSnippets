<snippet>
<content><![CDATA[
${1:# affinity_group_mappings: Mapper which maps affinty name between VM's OVF 
# affinity_label_mappings: Mappper which maps affinity label name between 
# allow_partial_import: Boolean indication whether to allow partial 
# auth: (required) Dictionary with values needed to 
# ballooning_enabled: If `true', use memory ballooning. Memory balloon 
# boot_devices: List of boot devices which should be used to 
# boot_menu: `True' enable menu to select boot device, 
# cd_iso: ISO file from ISO storage domain which should be 
# clone: If `yes' then the disks of the created virtual 
# clone_permissions: If `yes' then the permissions of the template 
# cloud_init: Dictionary with values for Unix-like Virtual 
# cloud_init_nics: List of dictionaries representing network 
# cloud_init_persist: If `true' the `cloud_init' or `sysprep' 
# cluster: Name of the cluster, where Virtual Machine 
# cluster_mappings: Mapper which maps cluster name between VM's OVF 
# comment: Comment of the Virtual Machine. 
# cpu_cores: Number of virtual CPUs cores of the Virtual 
# cpu_mode: CPU mode of the virtual machine. It can be some 
# cpu_pinning: CPU Pinning topology to map virtual machine CPU 
# cpu_shares: Set a CPU shares for this Virtual Machine. 
# cpu_sockets: Number of virtual CPUs sockets of the Virtual 
# cpu_threads: Number of virtual CPUs sockets of the Virtual 
# custom_properties: Properties sent to VDSM to configure various 
# delete_protected: If `yes' Virtual Machine will be set as delete 
# description: Description of the Virtual Machine. 
# disk_format: Specify format of the disk. If `cow' format is 
# disks: List of disks, which should be attached to 
# domain_mappings: Mapper which maps aaa domain name between VM's 
# fetch_nested: If `True' the module will fetch additional data 
# force: Please check to `Synopsis' to more detailed 
# graphical_console: Assign graphical console to the virtual machine. 
# high_availability: If `yes' Virtual Machine will be set as highly 
# high_availability_priority: Indicates the priority of the virtual machine 
# host: Specify host where Virtual Machine should be 
# id: ID of the Virtual Machine to manage. 
# initrd_path: Path to an initial ramdisk to be used with the 
# instance_type: Name of virtual machine's hardware 
# io_threads: Number of IO threads used by virtual machine. 
# kernel_params: Kernel command line parameters (formatted as 
# kernel_path: Path to a kernel image used to boot the virtual 
# kvm: Dictionary of values to be used to connect to 
# lease: Name of the storage domain this virtual machine 
# lun_mappings: Mapper which maps lun between VM's OVF and the 
# memory: Amount of memory of the Virtual Machine. Prefix 
# memory_guaranteed: Amount of minimal guaranteed memory of the 
# memory_max: Upper bound of virtual machine memory up to 
# name: Name of the Virtual Machine to manage. If VM 
# nested_attributes: Specifies list of the attributes which should be 
# nics: List of NICs, which should be attached to 
# numa_nodes: List of vNUMA Nodes to set for this VM and pin 
# numa_tune_mode: Set how the memory allocation for NUMA nodes of 
# operating_system: Operating system of the Virtual Machine. Default 
# placement_policy: The configuration of the virtual machine's 
# poll_interval: Number of the seconds the module waits until 
# quota_id: Virtual Machine quota ID to be used for disk. By 
# reassign_bad_macs: Boolean indication whether to reassign bad macs 
# rng_device: Random number generator (RNG). You can choose of 
# role_mappings: Mapper which maps role name between VM's OVF and 
# serial_console: `True' enable VirtIO serial console, `False' to 
# serial_policy: Specify a serial number policy for the Virtual 
# serial_policy_value: Allows you to specify a custom serial number. 
# smartcard_enabled: If `true', use smart card authentication. 
# soundcard_enabled: If `true', the sound card is added to the 
# sso: `True' enable Single Sign On by Guest Agent, 
# state: Should the Virtual Machine be running/stopped/pr 
# stateless: If `yes' Virtual Machine will be set as 
# storage_domain: Name of the storage domain where all template 
# sysprep: Dictionary with values for Windows Virtual 
# template: Name of the template, which should be used to 
# template_version: Version number of the template to be used for 
# timeout: The amount of time in seconds the module should 
# timezone: Sets time zone offset of the guest hardware 
# type: Type of the Virtual Machine. Default value is 
# usb_support: `True' enable USB support, `False' to disable 
# use_latest_template_version: Specify if latest template version should be 
# vmware: Dictionary of values to be used to connect to 
# vnic_profile_mappings: Mapper which maps an external virtual NIC 
# wait: `True' if the module should wait for the entity 
# watchdog: Assign watchdog device for the virtual machine. 
# xen: Dictionary of values to be used to connect to 
}- name: ${2:Name for ovirt_vms module.}
  ovirt_vms:
${3:   ${4:affinity_group_mappings}: ${5:"#"}}
${6:   ${7:affinity_label_mappings}: ${8:"#"}}
${9:   ${10:allow_partial_import}: ${11:"#"}}
${12:   ${13:auth}: ${14:"#"}}
${15:   ${16:ballooning_enabled}: ${17:"#"}}
${18:   ${19:boot_devices}: ${20:"#"}}
${21:   ${22:boot_menu}: ${23:"#"}}
${24:   ${25:cd_iso}: ${26:"#"}}
${27:   ${28:clone}: ${29:"#"}}
${30:   ${31:clone_permissions}: ${32:"#"}}
${33:   ${34:cloud_init}: ${35:"#"}}
${36:   ${37:cloud_init_nics}: ${38:"#"}}
${39:   ${40:cloud_init_persist}: ${41:"#"}}
${42:   ${43:cluster}: ${44:"#"}}
${45:   ${46:cluster_mappings}: ${47:"#"}}
${48:   ${49:comment}: ${50:"#"}}
${51:   ${52:cpu_cores}: ${53:"#"}}
${54:   ${55:cpu_mode}: ${56:"#"}}
${57:   ${58:cpu_pinning}: ${59:"#"}}
${60:   ${61:cpu_shares}: ${62:"#"}}
${63:   ${64:cpu_sockets}: ${65:"#"}}
${66:   ${67:cpu_threads}: ${68:"#"}}
${69:   ${70:custom_properties}: ${71:"#"}}
${72:   ${73:delete_protected}: ${74:"#"}}
${75:   ${76:description}: ${77:"#"}}
${78:   ${79:disk_format}: ${80:"#"}}
${81:   ${82:disks}: ${83:"#"}}
${84:   ${85:domain_mappings}: ${86:"#"}}
${87:   ${88:fetch_nested}: ${89:"#"}}
${90:   ${91:force}: ${92:"#"}}
${93:   ${94:graphical_console}: ${95:"#"}}
${96:   ${97:high_availability}: ${98:"#"}}
${99:   ${100:high_availability_priority}: ${101:"#"}}
${102:   ${103:host}: ${104:"#"}}
${105:   ${106:id}: ${107:"#"}}
${108:   ${109:initrd_path}: ${110:"#"}}
${111:   ${112:instance_type}: ${113:"#"}}
${114:   ${115:io_threads}: ${116:"#"}}
${117:   ${118:kernel_params}: ${119:"#"}}
${120:   ${121:kernel_path}: ${122:"#"}}
${123:   ${124:kvm}: ${125:"#"}}
${126:   ${127:lease}: ${128:"#"}}
${129:   ${130:lun_mappings}: ${131:"#"}}
${132:   ${133:memory}: ${134:"#"}}
${135:   ${136:memory_guaranteed}: ${137:"#"}}
${138:   ${139:memory_max}: ${140:"#"}}
${141:   ${142:name}: ${143:"#"}}
${144:   ${145:nested_attributes}: ${146:"#"}}
${147:   ${148:nics}: ${149:"#"}}
${150:   ${151:numa_nodes}: ${152:"#"}}
${153:   ${154:numa_tune_mode}: ${155:"#"}}
${156:   ${157:operating_system}: ${158:"#"}}
${159:   ${160:placement_policy}: ${161:"#"}}
${162:   ${163:poll_interval}: ${164:"#"}}
${165:   ${166:quota_id}: ${167:"#"}}
${168:   ${169:reassign_bad_macs}: ${170:"#"}}
${171:   ${172:rng_device}: ${173:"#"}}
${174:   ${175:role_mappings}: ${176:"#"}}
${177:   ${178:serial_console}: ${179:"#"}}
${180:   ${181:serial_policy}: ${182:"#"}}
${183:   ${184:serial_policy_value}: ${185:"#"}}
${186:   ${187:smartcard_enabled}: ${188:"#"}}
${189:   ${190:soundcard_enabled}: ${191:"#"}}
${192:   ${193:sso}: ${194:"#"}}
${195:   ${196:state}: ${197:"#"}}
${198:   ${199:stateless}: ${200:"#"}}
${201:   ${202:storage_domain}: ${203:"#"}}
${204:   ${205:sysprep}: ${206:"#"}}
${207:   ${208:template}: ${209:"#"}}
${210:   ${211:template_version}: ${212:"#"}}
${213:   ${214:timeout}: ${215:"#"}}
${216:   ${217:timezone}: ${218:"#"}}
${219:   ${220:type}: ${221:"#"}}
${222:   ${223:usb_support}: ${224:"#"}}
${225:   ${226:use_latest_template_version}: ${227:"#"}}
${228:   ${229:vmware}: ${230:"#"}}
${231:   ${232:vnic_profile_mappings}: ${233:"#"}}
${234:   ${235:wait}: ${236:"#"}}
${237:   ${238:watchdog}: ${239:"#"}}
${240:   ${241:xen}: ${242:"#"}}
${243:${244:   become: ${245:true}} 
${246:   become_method: ${247:su}} 
${248:   become_user: ${249:nobody}} 
${250:   become_flags: ${251:"-s /bin/sh"}}} 
${252:   when: ${253:variable is defined}} 
${254:   with_items: ${255:array}} 
]]></content>
	<tabTrigger>ovirt_vms</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
