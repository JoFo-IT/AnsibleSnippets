<snippet>
<content><![CDATA[
${1:# delimiter: A one-character string used to separate fields. 
# dialect: The CSV dialect to use when parsing the CSV 
# fieldnames: A list of field names for every column. This is 
# key: The column name used as a key for the resulting 
# path: (required) The CSV filename to read data from. 
# skipinitialspace: Whether to ignore any whitespaces immediately 
# strict: Whether to raise an exception on bad CSV input. 
# unique: Whether the `key' used is expected to be unique. 
}- name: ${2:Name for read_csv module.}
  read_csv:
${3:   ${4:delimiter}: ${5:"#"}}
${6:   ${7:dialect}: ${8:"#"}}
${9:   ${10:fieldnames}: ${11:"#"}}
${12:   ${13:key}: ${14:"#"}}
${15:   ${16:path}: ${17:"#"}}
${18:   ${19:skipinitialspace}: ${20:"#"}}
${21:   ${22:strict}: ${23:"#"}}
${24:   ${25:unique}: ${26:"#"}}
${27:${28:   become: ${29:true}} 
${30:   become_method: ${31:su}} 
${32:   become_user: ${33:nobody}} 
${34:   become_flags: ${35:"-s /bin/sh"}}} 
${36:   when: ${37:variable is defined}} 
${38:   with_items: ${39:array}} 
]]></content>
	<tabTrigger>read_csv</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
