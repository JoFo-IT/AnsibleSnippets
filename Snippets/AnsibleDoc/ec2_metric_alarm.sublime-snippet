<snippet>
<content><![CDATA[
${1:#alarm_actions = A list of the names action(s) taken when the alarm is in the 'alarm' status
#aws_access_key = AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment
#aws_secret_key = AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY
#comparison = Determines how the threshold value is compared
#description = A longer description of the alarm
#dimensions = Describes to what the alarm is applied
#ec2_url = Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Ignored
#evaluation_periods = The number of times in which the metric is evaluated before final calculation
#insufficient_data_actions = A list of the names of action(s) to take when the alarm is in the 'insufficient_data' status
#metric = Name of the monitored metric (e.g. CPUUtilization) Metric must already exist
#name = Unique name for the alarm
#namespace = Name of the appropriate namespace ('AWS/EC2', 'System/Linux', etc.), which determines the category it will
#ok_actions = A list of the names of action(s) to take when the alarm is in the 'ok' status
#period = The time (in seconds) between metric evaluations
#profile = uses a boto profile. Only works with boto >= 2.24.0
#region = The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if
#http = ec2_region
#security_token = AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment
#state = register or deregister the alarm
#statistic = Operation applied to the metric Works in conjunction with period and evaluation_periods to determine the
#threshold = Sets the min/max bound for triggering the alarm
#unit = The threshold's unit of measurement
#validate_certs = When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
}- name: ${2:Name for ec2_metric_alarm module.}
${3:  become: ${4:yes}}
  ec2_metric_alarm: ${5:alarm_actions=${6: } }${7:aws_access_key=${8: } }${9:aws_secret_key=${10: } }${11:comparison=${12: } }${13:description=${14: } }${15:dimensions=${16: } }${17:ec2_url=${18: } }${19:evaluation_periods=${20: } }${21:insufficient_data_actions=${22: } }${23:metric=${24: } }${25:name=${26: } }${27:namespace=${28: } }${29:ok_actions=${30: } }${31:period=${32: } }${33:profile=${34: } }${35:region=${36: } }${37:http=${38: } }${39:security_token=${40: } }${41:state=${42: } }${43:statistic=${44: } }${45:threshold=${46: } }${47:unit=${48: } }${49:validate_certs=${50: } }
${51:  when: ${52: variable is defined}}
${53:  with_items: ${54: array}}
]]></content>
	<tabTrigger>ec2_metric_alarm</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
