<snippet>
<content><![CDATA[
${1:#api_key = Rackspace API key (overrides `credentials')
#auth_endpoint = The URI of the authentication service
#auto_increment = Whether or not to increment a single number with the name of the created servers. Only applicable when used with
#boot_from_volume = Whether or not to boot the instance from a Cloud Block Storage volume. If `yes' and `image' is specified a new
#boot_volume = Cloud Block Storage ID or Name to use as the boot volume of the instance
#boot_volume_size = Size of the volume to create in Gigabytes. This is only required with `image' and `boot_from_volume'.
#boot_volume_terminate = Whether the `boot_volume' or newly created volume from `image' will be terminated when the server is terminated
#config_drive = Attach read-only configuration drive to server as label config-2
#count = number of instances to launch
#count_offset = number count to start at
#credentials = File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
#disk_config = Disk partitioning strategy
#env = Environment as configured in ~/.pyrax.cfg, see
#https = pyrax-
#exact_count = Explicitly ensure an exact count of instances, used with state=active/present. If specified as `yes' and `count'
#extra_client_args = A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced
#extra_create_args = A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it
#files = Files to insert into the instance. remotefilename:localcontent
#flavor = flavor to use for the instance
#group = host group to assign to server, is also used for idempotent operations to ensure a specific number of instances
#identity_type = Authentication machanism to use, such as rackspace or keystone
#image = image to use for the instance. Can be an `id', `human_id' or `name'. With `boot_from_volume', a Cloud Block
#instance_ids = list of instance ids, currently only used when state='absent' to remove instances
#key_name = key pair to use on the instance
#meta = A hash of metadata to associate with the instance
#name = Name to give the instance
#networks = The network to attach to the instances. If specified, you must include ALL networks including the public and
#region = Region to create an instance in
#state = Indicate desired state of the resource
#tenant_id = The tenant ID used for authentication
#tenant_name = The tenant name used for authentication
#user_data = Data to be uploaded to the servers config drive. This option implies `config_drive'. Can be a file path or a
#username = Rackspace username (overrides `credentials')
#verify_ssl = Whether or not to require SSL validation of API endpoints
#wait = wait for the instance to be in state 'running' before returning
#wait_timeout = how long before wait gives up, in seconds
}- name: ${2:Name for rax module.}
${3:  become: ${4:yes}}
  rax: ${5:api_key=${6: } }${7:auth_endpoint=${8: } }${9:auto_increment=${10: } }${11:boot_from_volume=${12: } }${13:boot_volume=${14: } }${15:boot_volume_size=${16: } }${17:boot_volume_terminate=${18: } }${19:config_drive=${20: } }${21:count=${22: } }${23:count_offset=${24: } }${25:credentials=${26: } }${27:disk_config=${28: } }${29:env=${30: } }${31:https=${32: } }${33:exact_count=${34: } }${35:extra_client_args=${36: } }${37:extra_create_args=${38: } }${39:files=${40: } }${41:flavor=${42: } }${43:group=${44: } }${45:identity_type=${46: } }${47:image=${48: } }${49:instance_ids=${50: } }${51:key_name=${52: } }${53:meta=${54: } }${55:name=${56: } }${57:networks=${58: } }${59:region=${60: } }${61:state=${62: } }${63:tenant_id=${64: } }${65:tenant_name=${66: } }${67:user_data=${68: } }${69:username=${70: } }${71:verify_ssl=${72: } }${73:wait=${74: } }${75:wait_timeout=${76: } }
${77:  when: ${78: variable is defined}}
${79:  with_items: ${80: array}}
]]></content>
	<tabTrigger>rax</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
