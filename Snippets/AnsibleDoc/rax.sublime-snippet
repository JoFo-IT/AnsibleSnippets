<snippet>
<content><![CDATA[
${1:# api_key: Rackspace API key, overrides `credentials'. 
# auth_endpoint: The URI of the authentication service. 
# auto_increment: Whether or not to increment a single number with the name of the created servers. Only applicable when 
# boot_from_volume: Whether or not to boot the instance from a Cloud Block Storage volume. If `yes' and `image' is specified 
# boot_volume: Cloud Block Storage ID or Name to use as the boot volume of the instance 
# boot_volume_size: Size of the volume to create in Gigabytes. This is only required with `image' and `boot_from_volume'. 
# boot_volume_terminate: Whether the `boot_volume' or newly created volume from `image' will be terminated when the server is 
# config_drive: Attach read-only configuration drive to server as label config-2 
# count: number of instances to launch 
# count_offset: number count to start at 
# credentials: File to find the Rackspace credentials in. Ignored if `api_key' and `username' are provided. 
# disk_config: Disk partitioning strategy 
# env: Environment as configured in `~/.pyrax.cfg', see 
# : pyrax-configuration. 
# exact_count: Explicitly ensure an exact count of instances, used with state=active/present. If specified as `yes' and 
# extra_client_args: A hash of key/value pairs to be used when creating the cloudservers client. This is considered an 
# extra_create_args: A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, 
# files: Files to insert into the instance. remotefilename:localcontent 
# flavor: flavor to use for the instance 
# group: host group to assign to server, is also used for idempotent operations to ensure a specific number of 
# identity_type: Authentication mechanism to use, such as rackspace or keystone. 
# image: image to use for the instance. Can be an `id', `human_id' or `name'. With `boot_from_volume', a Cloud 
# instance_ids: list of instance ids, currently only used when state='absent' to remove instances 
# key_name: key pair to use on the instance 
# meta: A hash of metadata to associate with the instance 
# name: Name to give the instance 
# networks: The network to attach to the instances. If specified, you must include ALL networks including the public 
# region: Region to create an instance in. 
# state: Indicate desired state of the resource 
# tenant_id: The tenant ID used for authentication. 
# tenant_name: The tenant name used for authentication. 
# user_data: Data to be uploaded to the servers config drive. This option implies `config_drive'. Can be a file path 
# username: Rackspace username, overrides `credentials'. 
# verify_ssl: Whether or not to require SSL validation of API endpoints. 
# wait: wait for the instance to be in state 'running' before returning 
# wait_timeout: how long before wait gives up, in seconds 
}- name: ${2:Name for rax module.}
  rax:
${3:   ${4:api_key}: ${5:"#"}}
${6:   ${7:auth_endpoint}: ${8:"#"}}
${9:   ${10:auto_increment}: ${11:"#"}}
${12:   ${13:boot_from_volume}: ${14:"#"}}
${15:   ${16:boot_volume}: ${17:"#"}}
${18:   ${19:boot_volume_size}: ${20:"#"}}
${21:   ${22:boot_volume_terminate}: ${23:"#"}}
${24:   ${25:config_drive}: ${26:"#"}}
${27:   ${28:count}: ${29:"#"}}
${30:   ${31:count_offset}: ${32:"#"}}
${33:   ${34:credentials}: ${35:"#"}}
${36:   ${37:disk_config}: ${38:"#"}}
${39:   ${40:env}: ${41:"#"}}
${42:   ${43:}: ${44:"#"}}
${45:   ${46:exact_count}: ${47:"#"}}
${48:   ${49:extra_client_args}: ${50:"#"}}
${51:   ${52:extra_create_args}: ${53:"#"}}
${54:   ${55:files}: ${56:"#"}}
${57:   ${58:flavor}: ${59:"#"}}
${60:   ${61:group}: ${62:"#"}}
${63:   ${64:identity_type}: ${65:"#"}}
${66:   ${67:image}: ${68:"#"}}
${69:   ${70:instance_ids}: ${71:"#"}}
${72:   ${73:key_name}: ${74:"#"}}
${75:   ${76:meta}: ${77:"#"}}
${78:   ${79:name}: ${80:"#"}}
${81:   ${82:networks}: ${83:"#"}}
${84:   ${85:region}: ${86:"#"}}
${87:   ${88:state}: ${89:"#"}}
${90:   ${91:tenant_id}: ${92:"#"}}
${93:   ${94:tenant_name}: ${95:"#"}}
${96:   ${97:user_data}: ${98:"#"}}
${99:   ${100:username}: ${101:"#"}}
${102:   ${103:verify_ssl}: ${104:"#"}}
${105:   ${106:wait}: ${107:"#"}}
${108:   ${109:wait_timeout}: ${110:"#"}}
${111:${112:   become: ${113:true}} 
${114:   become_method: ${115:su}} 
${116:   become_user: ${117:nobody}} 
${118:   become_flags: ${119:"-s /bin/sh"}}} 
${120:   when: ${121:variable is defined}} 
${122:   with_items: ${123:array}} 
]]></content>
	<tabTrigger>rax</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
