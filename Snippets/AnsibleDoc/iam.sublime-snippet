<snippet>
<content><![CDATA[
${1:# access_key_ids: A list of the keys that you want impacted by the access_key_state parameter. 
# access_key_state: When type is user, it creates, removes, deactivates or activates a user's access key(s). Note that 
# aws_access_key: AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY 
# aws_secret_key: AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or 
# ec2_url: Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). 
# groups: A list of groups the user should belong to. When update, will gracefully remove groups not listed. 
# iam_type: (required) Type of IAM resource 
# key_count: When access_key_state is create it will ensure this quantity of keys are present. Defaults to 1. 
# name: (required) Name of IAM resource to create or identify 
# new_name: When state is update, will replace name with new_name on IAM resource 
# new_path: When state is update, will replace the path with new_path on the IAM resource 
# password: When type is user and state is present, define the users login password. Also works with update. Note 
# path: When creating or updating, specify the desired path of the resource. If state is present, it will 
# profile: Uses a boto profile. Only works with boto >= 2.24.0. 
# security_token: AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN 
# state: (required) Whether to create, delete or update the IAM resource. Note, roles cannot be updated. 
# trust_policy: The inline (JSON or YAML) trust policy document that grants an entity permission to assume the role. 
# trust_policy_filepath: The path to the trust policy document that grants an entity permission to assume the role. Mutually 
# update_password: `always' will update passwords if they differ.  `on_create' will only set the password for newly created 
# validate_certs: When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0. 
}- name: ${2:Name for iam module.}
  iam:
${3:   ${4:access_key_ids}: ${5:"#"}}
${6:   ${7:access_key_state}: ${8:"#"}}
${9:   ${10:aws_access_key}: ${11:"#"}}
${12:   ${13:aws_secret_key}: ${14:"#"}}
${15:   ${16:ec2_url}: ${17:"#"}}
${18:   ${19:groups}: ${20:"#"}}
${21:   ${22:iam_type}: ${23:"#"}}
${24:   ${25:key_count}: ${26:"#"}}
${27:   ${28:name}: ${29:"#"}}
${30:   ${31:new_name}: ${32:"#"}}
${33:   ${34:new_path}: ${35:"#"}}
${36:   ${37:password}: ${38:"#"}}
${39:   ${40:path}: ${41:"#"}}
${42:   ${43:profile}: ${44:"#"}}
${45:   ${46:security_token}: ${47:"#"}}
${48:   ${49:state}: ${50:"#"}}
${51:   ${52:trust_policy}: ${53:"#"}}
${54:   ${55:trust_policy_filepath}: ${56:"#"}}
${57:   ${58:update_password}: ${59:"#"}}
${60:   ${61:validate_certs}: ${62:"#"}}
${63:${64:   become: ${65:true}} 
${66:   become_method: ${67:su}} 
${68:   become_user: ${69:nobody}} 
${70:   become_flags: ${71:"-s /bin/sh"}}} 
${72:   when: ${73:variable is defined}} 
${74:   with_items: ${75:array}} 
]]></content>
	<tabTrigger>iam</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
