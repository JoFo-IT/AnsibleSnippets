<snippet>
<content><![CDATA[
${1:# acme_accountkey_path: The path to the accountkey for the `acme' 
# acme_chain: Include the intermediate certificate to the 
# acme_challenge_path: The path to the ACME challenge directory that is 
# attributes: The attributes the resulting file or directory 
# backup: Create a backup file including a timestamp so 
# csr_path: Path to the Certificate Signing Request (CSR) 
# extended_key_usage: The `extended_key_usage' extension field must 
# extended_key_usage_strict: If set to `yes', the `extended_key_usage' 
# force: Generate the certificate, even if it already 
# group: Name of the group that should own the 
# has_expired: Checks if the certificate is expired/not expired 
# invalid_at: The certificate must be invalid at this point in 
# issuer: The key/value pairs that must be present in the 
# issuer_strict: If set to `yes', the `issuer' field must contain 
# key_usage: The `key_usage' extension field must contain all 
# key_usage_strict: If set to `yes', the `key_usage' extension field 
# mode: The permissions the resulting file or directory 
# not_after: The certificate must expire at this point in 
# not_before: The certificate must start to become valid at 
# ownca_digest: The digest algorithm to be used for the `ownca' 
# ownca_not_after: The point in time at which the certificate stops 
# ownca_not_before: The point in time the certificate is valid from. 
# ownca_path: Remote absolute path of the CA (Certificate 
# ownca_privatekey_passphrase: The passphrase for the `ownca_privatekey_path'. 
# ownca_privatekey_path: Path to the CA (Certificate Authority) private 
# ownca_version: The version of the `ownca' certificate. Nowadays 
# owner: Name of the user that should own the 
# path: (required) Remote absolute path where the 
# privatekey_passphrase: The passphrase for the `privatekey_path'. This 
# privatekey_path: Path to the private key to use when signing the 
# provider: (required) Name of the provider to use to 
# select_crypto_backend: Determines which crypto backend to use. The 
# selevel: The level part of the SELinux file context. This 
# selfsigned_digest: Digest algorithm to be used when self-signing 
# selfsigned_not_after: The point in time at which the certificate stops 
# selfsigned_not_before: The point in time the certificate is valid from. 
# selfsigned_version: Version of the `selfsigned' certificate. 
# serole: The role part of the SELinux file context. When 
# setype: The type part of the SELinux file context. When 
# seuser: The user part of the SELinux file context. By 
# signature_algorithms: A list of algorithms that you would accept the 
# state: Whether the certificate should exist or not, 
# subject: The key/value pairs that must be present in the 
# subject_alt_name: The `subject_alt_name' extension field must 
# subject_alt_name_strict: If set to `yes', the `subject_alt_name' 
# subject_strict: If set to `yes', the `subject' field must 
# unsafe_writes: Influence when to use atomic operation to 
# valid_at: The certificate must be valid at this point in 
# valid_in: The certificate must still be valid at this 
# version: The version of the certificate. Nowadays it 
}- name: ${2:Name for openssl_certificate module.}
  openssl_certificate:
${3:   ${4:acme_accountkey_path}: ${5:"#"}}
${6:   ${7:acme_chain}: ${8:"#"}}
${9:   ${10:acme_challenge_path}: ${11:"#"}}
${12:   ${13:attributes}: ${14:"#"}}
${15:   ${16:backup}: ${17:"#"}}
${18:   ${19:csr_path}: ${20:"#"}}
${21:   ${22:extended_key_usage}: ${23:"#"}}
${24:   ${25:extended_key_usage_strict}: ${26:"#"}}
${27:   ${28:force}: ${29:"#"}}
${30:   ${31:group}: ${32:"#"}}
${33:   ${34:has_expired}: ${35:"#"}}
${36:   ${37:invalid_at}: ${38:"#"}}
${39:   ${40:issuer}: ${41:"#"}}
${42:   ${43:issuer_strict}: ${44:"#"}}
${45:   ${46:key_usage}: ${47:"#"}}
${48:   ${49:key_usage_strict}: ${50:"#"}}
${51:   ${52:mode}: ${53:"#"}}
${54:   ${55:not_after}: ${56:"#"}}
${57:   ${58:not_before}: ${59:"#"}}
${60:   ${61:ownca_digest}: ${62:"#"}}
${63:   ${64:ownca_not_after}: ${65:"#"}}
${66:   ${67:ownca_not_before}: ${68:"#"}}
${69:   ${70:ownca_path}: ${71:"#"}}
${72:   ${73:ownca_privatekey_passphrase}: ${74:"#"}}
${75:   ${76:ownca_privatekey_path}: ${77:"#"}}
${78:   ${79:ownca_version}: ${80:"#"}}
${81:   ${82:owner}: ${83:"#"}}
${84:   ${85:path}: ${86:"#"}}
${87:   ${88:privatekey_passphrase}: ${89:"#"}}
${90:   ${91:privatekey_path}: ${92:"#"}}
${93:   ${94:provider}: ${95:"#"}}
${96:   ${97:select_crypto_backend}: ${98:"#"}}
${99:   ${100:selevel}: ${101:"#"}}
${102:   ${103:selfsigned_digest}: ${104:"#"}}
${105:   ${106:selfsigned_not_after}: ${107:"#"}}
${108:   ${109:selfsigned_not_before}: ${110:"#"}}
${111:   ${112:selfsigned_version}: ${113:"#"}}
${114:   ${115:serole}: ${116:"#"}}
${117:   ${118:setype}: ${119:"#"}}
${120:   ${121:seuser}: ${122:"#"}}
${123:   ${124:signature_algorithms}: ${125:"#"}}
${126:   ${127:state}: ${128:"#"}}
${129:   ${130:subject}: ${131:"#"}}
${132:   ${133:subject_alt_name}: ${134:"#"}}
${135:   ${136:subject_alt_name_strict}: ${137:"#"}}
${138:   ${139:subject_strict}: ${140:"#"}}
${141:   ${142:unsafe_writes}: ${143:"#"}}
${144:   ${145:valid_at}: ${146:"#"}}
${147:   ${148:valid_in}: ${149:"#"}}
${150:   ${151:version}: ${152:"#"}}
${153:${154:   become: ${155:true}} 
${156:   become_method: ${157:su}} 
${158:   become_user: ${159:nobody}} 
${160:   become_flags: ${161:"-s /bin/sh"}}} 
${162:   when: ${163:variable is defined}} 
${164:   with_items: ${165:array}} 
]]></content>
	<tabTrigger>openssl_certificate</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
