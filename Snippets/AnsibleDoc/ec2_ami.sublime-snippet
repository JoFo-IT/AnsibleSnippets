<snippet>
<content><![CDATA[
${1:# architecture: The target architecture of the image to register 
# aws_access_key: AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY 
# aws_secret_key: AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or 
# delete_snapshot: Delete snapshots when deregistering the AMI. 
# description: Human-readable string describing the contents and purpose of the AMI. 
# device_mapping: List of device hashes/dictionaries with custom configurations (same block-device-mapping parameters) 
# ec2_url: Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). 
# image_id: Image ID to be deregistered. 
# instance_id: Instance ID to create the AMI from. 
# kernel_id: The target kernel id of the image to register 
# launch_permissions: Users and groups that should be able to launch the AMI. Expects dictionary with a key of user_ids and/or 
# name: The name of the new AMI. 
# no_reboot: Flag indicating that the bundling process should not attempt to shutdown the instance before bundling. 
# profile: Uses a boto profile. Only works with boto >= 2.24.0. 
# region: The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment 
# http: ec2_region 
# root_device_name: The root device name of the image to register 
# security_token: AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN 
# state: Create or deregister/delete AMI. 
# tags: A dictionary of tags to add to the new image; '{"key":"value"}' and '{"key":"value","key":"value"}' 
# validate_certs: When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0. 
# virtualization_type: The virtualization type of the image to register 
# wait: Wait for the AMI to be in state 'available' before returning. 
# wait_timeout: How long before wait gives up, in seconds. 
}- name: ${2:Name for ec2_ami module.}
  ec2_ami:
${3:   ${4:architecture}: ${5:"#"}}
${6:   ${7:aws_access_key}: ${8:"#"}}
${9:   ${10:aws_secret_key}: ${11:"#"}}
${12:   ${13:delete_snapshot}: ${14:"#"}}
${15:   ${16:description}: ${17:"#"}}
${18:   ${19:device_mapping}: ${20:"#"}}
${21:   ${22:ec2_url}: ${23:"#"}}
${24:   ${25:image_id}: ${26:"#"}}
${27:   ${28:instance_id}: ${29:"#"}}
${30:   ${31:kernel_id}: ${32:"#"}}
${33:   ${34:launch_permissions}: ${35:"#"}}
${36:   ${37:name}: ${38:"#"}}
${39:   ${40:no_reboot}: ${41:"#"}}
${42:   ${43:profile}: ${44:"#"}}
${45:   ${46:region}: ${47:"#"}}
${48:   ${49:http}: ${50:"#"}}
${51:   ${52:root_device_name}: ${53:"#"}}
${54:   ${55:security_token}: ${56:"#"}}
${57:   ${58:state}: ${59:"#"}}
${60:   ${61:tags}: ${62:"#"}}
${63:   ${64:validate_certs}: ${65:"#"}}
${66:   ${67:virtualization_type}: ${68:"#"}}
${69:   ${70:wait}: ${71:"#"}}
${72:   ${73:wait_timeout}: ${74:"#"}}
${75:${76:   become: ${77:true}} 
${78:   become_method: ${79:su}} 
${80:   become_user: ${81:nobody}} 
${82:   become_flags: ${83:"-s /bin/sh"}}} 
${84:   when: ${85:variable is defined}} 
${86:   with_items: ${87:array}} 
]]></content>
	<tabTrigger>ec2_ami</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
