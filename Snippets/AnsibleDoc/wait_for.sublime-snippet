<snippet>
<content><![CDATA[
${1:#connect_timeout = maximum number of seconds to wait for a connection to happen before closing and retrying
#delay = number of seconds to wait before starting to poll
#exclude_hosts = list of hosts or IPs to ignore when looking for active TCP connections for `drained' state
#host = A resolvable hostname or IP address to wait for
#path = path to a file on the filesytem that must exist before continuing
#port = port number to poll
#search_regex = Can be used to match a string in either a file or a socket connection. Defaults to a multiline regex.
#state = either `present', `started', or `stopped', `absent', or `drained' When checking a port `started' will ensure the
#timeout = maximum number of seconds to wait for
}- name: ${2:Name for wait_for module.}
${3:  become: ${4:yes}}
  wait_for: ${5:connect_timeout=${6: } }${7:delay=${8: } }${9:exclude_hosts=${10: } }${11:host=${12: } }${13:path=${14: } }${15:port=${16: } }${17:search_regex=${18: } }${19:state=${20: } }${21:timeout=${22: } }
${23:  when: ${24: variable is defined}}
${25:  with_items: ${26: array}}
]]></content>
	<tabTrigger>wait_for</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
