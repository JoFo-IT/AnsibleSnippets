<snippet>
<content><![CDATA[
${1:# accept_hostkey: if `yes', ensure that "-o StrictHostKeyChecking=no" is present as an ssh options. 
# archive: Specify archive file path with extension. If specified, creates an archive file of the specified format 
# bare: if `yes', repository will be created as a bare repo, otherwise it will be a standard repo with a 
# clone: If `no', do not clone the repository if it does not exist locally 
# depth: Create a shallow clone with a history truncated to the specified number or revisions. The minimum 
# dest: (required) The path of where the repository should be checked out. This parameter is required, unless 
# executable: Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be 
# force: If `yes', any modified files in the working repository will be discarded.  Prior to 0.7, this was always 
# key_file: Specify an optional private key file to use for the checkout. 
# recursive: if `no', repository will be cloned without the --recursive option, skipping sub-modules. 
# reference: Reference repository (see "git clone --reference ...") 
# refspec: Add an additional refspec to be fetched. If version is set to a `SHA-1' not reachable from any branch or 
# remote: Name of the remote. 
# repo: (required) git, SSH, or HTTP(S) protocol address of the git repository. 
# ssh_opts: Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override 
# track_submodules: if `yes', submodules will track the latest commit on their master branch (or other branch specified in 
# umask: The umask to set before doing any checkouts, or any other repository maintenance. 
# update: If `no', do not retrieve new revisions from the origin repository 
# verify_commit: if `yes', when cloning or checking out a `version' verify the signature of a GPG signed commit. This 
# version: What version of the repository to check out.  This can be the the literal string `HEAD', a branch name, 
}- name: ${2:Name for git module.}
  git:
${3:   ${4:accept_hostkey}: ${5:"#"}}
${6:   ${7:archive}: ${8:"#"}}
${9:   ${10:bare}: ${11:"#"}}
${12:   ${13:clone}: ${14:"#"}}
${15:   ${16:depth}: ${17:"#"}}
${18:   ${19:dest}: ${20:"#"}}
${21:   ${22:executable}: ${23:"#"}}
${24:   ${25:force}: ${26:"#"}}
${27:   ${28:key_file}: ${29:"#"}}
${30:   ${31:recursive}: ${32:"#"}}
${33:   ${34:reference}: ${35:"#"}}
${36:   ${37:refspec}: ${38:"#"}}
${39:   ${40:remote}: ${41:"#"}}
${42:   ${43:repo}: ${44:"#"}}
${45:   ${46:ssh_opts}: ${47:"#"}}
${48:   ${49:track_submodules}: ${50:"#"}}
${51:   ${52:umask}: ${53:"#"}}
${54:   ${55:update}: ${56:"#"}}
${57:   ${58:verify_commit}: ${59:"#"}}
${60:   ${61:version}: ${62:"#"}}
${63:${64:   become: ${65:true}} 
${66:   become_method: ${67:su}} 
${68:   become_user: ${69:nobody}} 
${70:   become_flags: ${71:"-s /bin/sh"}}} 
${72:   when: ${73:variable is defined}} 
${74:   with_items: ${75:array}} 
]]></content>
	<tabTrigger>git</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
