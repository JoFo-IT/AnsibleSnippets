<snippet>
<content><![CDATA[
${1:# bandwidth: The bandwidth of the link aggregation group. 
# connection_id: A connection ID to link with the link aggregation group upon creation. 
# delete_with_disassociation: To be used with `state=absent' to delete connections after disassociating them with the LAG. 
# force_delete: This allows the minimum number of links to be set to 0, any hosted connections disassociated, and any 
# link_aggregation_group_id: The ID of the Direct Connect link aggregation group. 
# location: The location of the link aggregation group. 
# min_links: The minimum number of physical connections that must be operational for the LAG itself to be 
# name: The name of the Direct Connect link aggregation group. 
# num_connections: The number of connections with which to intialize the link aggregation group. 
# state: The state of the Direct Connect link aggregation group. 
# wait: Whether or not to wait for the operation to complete. May be useful when waiting for virtual interfaces 
# wait_timeout: The duration in seconds to wait if `wait' is True. 
}- name: ${2:Name for aws_direct_connect_link_aggregation_group module.}
  aws_direct_connect_link_aggregation_group:
${3:   ${4:bandwidth}: ${5:"#"}}
${6:   ${7:connection_id}: ${8:"#"}}
${9:   ${10:delete_with_disassociation}: ${11:"#"}}
${12:   ${13:force_delete}: ${14:"#"}}
${15:   ${16:link_aggregation_group_id}: ${17:"#"}}
${18:   ${19:location}: ${20:"#"}}
${21:   ${22:min_links}: ${23:"#"}}
${24:   ${25:name}: ${26:"#"}}
${27:   ${28:num_connections}: ${29:"#"}}
${30:   ${31:state}: ${32:"#"}}
${33:   ${34:wait}: ${35:"#"}}
${36:   ${37:wait_timeout}: ${38:"#"}}
${39:${40:   become: ${41:true}} 
${42:   become_method: ${43:su}} 
${44:   become_user: ${45:nobody}} 
${46:   become_flags: ${47:"-s /bin/sh"}}} 
${48:   when: ${49:variable is defined}} 
${50:   with_items: ${51:array}} 
]]></content>
	<tabTrigger>aws_direct_connect_link_aggregation_group</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
