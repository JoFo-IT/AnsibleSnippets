<snippet>
<content><![CDATA[
${1:#backup = Create a backup file including the timestamp information so you can get the original file back if you somehow
#dest = Location to render the template to on the remote machine.
#follow = This flag indicates that filesystem links, if they exist, should be followed.
#force = the default is `yes', which will replace the remote file when contents are different than the source.  If `no',
#group = name of the group that should own the file/directory, as would be fed to `chown'
#mode = mode the file or directory should be. For those used to `/usr/bin/chmod' remember that modes are actually octal
#owner = name of the user that should own the file/directory, as would be fed to `chown'
#selevel = level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the `range'.
#serole = role part of SELinux file context, `_default' feature works as for `seuser'.
#setype = type part of SELinux file context, `_default' feature works as for `seuser'.
#seuser = user part of SELinux file context. Will default to system policy, if applicable. If set to `_default', it will
#src = Path of a Jinja2 formatted template on the local server. This can be a relative or absolute path.
#validate = The validation command to run before copying into place. The path to the file to validate is passed in via '%s'
}- name: ${2:Name for template module.}
${3:  become: ${4:yes}}
  template: ${5:backup=${6: } }${7:dest=${8: } }${9:follow=${10: } }${11:force=${12: } }${13:group=${14: } }${15:mode=${16: } }${17:owner=${18: } }${19:selevel=${20: } }${21:serole=${22: } }${23:setype=${24: } }${25:seuser=${26: } }${27:src=${28: } }${29:validate=${30: } }
${31:  when: ${32: variable is defined}}
${33:  with_items: ${34: array}}
]]></content>
	<tabTrigger>template</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
