<snippet>
<content><![CDATA[
${1:# address_translation: Specifies, when `enabled', that the system 
# clone_pools: Specifies a pool or list of pools that the 
# default_persistence_profile: Default Profile which manages the session 
# description: Virtual server description. 
# destination: Destination IP of the virtual server. Required 
# disabled_vlans: List of VLANs to be disabled. If the partition 
# enabled_vlans: List of VLANs to be enabled. When a VLAN named 
# fallback_persistence_profile: Specifies the persistence profile you want the 
# firewall_enforced_policy: Applies the specify AFM policy to the virtual in 
# firewall_staged_policy: Applies the specify AFM policy to the virtual in 
# insert_metadata: When set to `no' it will not set metadata on the 
# ip_intelligence_policy: Specifies the IP intelligence policy applied to 
# ip_protocol: Specifies a network protocol name you want the 
# irules: List of rules to be applied in priority order. 
# mask: Specifies the destination address network mask. 
# metadata: Arbitrary key/value pairs that you can attach to 
# mirror: Specifies that the system mirrors connections on 
# name: (required) Virtual server name. 
# partition: Device partition to manage resources on. 
# policies: Specifies the policies for the virtual server. 
# pool: Default pool for the virtual server. If you want 
# port: Port of the virtual server. Required when 
# port_translation: Specifies, when `enabled', that the system 
# profiles: List of profiles (HTTP, ClientSSL, ServerSSL, 
# provider: A dict object containing connection details. 
# rate_limit: Virtual server rate limit (connections-per- 
# rate_limit_dst_mask: Specifies a mask, in bits, to be applied to the 
# rate_limit_mode: Indicates whether the rate limit is applied per 
# rate_limit_src_mask: Specifies a mask, in bits, to be applied to the 
# security_log_profiles: Specifies the log profile applied to the virtual 
# security_nat_policy: Specify the Firewall NAT policies for the 
# snat: Source network address policy. When `type' is 
# source: Specifies an IP address or network from which 
# source_port: Specifies whether the system preserves the 
# state: The virtual server state. If `absent', delete 
# type: Specifies the network service provided by this 
}- name: ${2:Name for bigip_virtual_server module.}
  bigip_virtual_server:
${3:   ${4:address_translation}: ${5:"#"}}
${6:   ${7:clone_pools}: ${8:"#"}}
${9:   ${10:default_persistence_profile}: ${11:"#"}}
${12:   ${13:description}: ${14:"#"}}
${15:   ${16:destination}: ${17:"#"}}
${18:   ${19:disabled_vlans}: ${20:"#"}}
${21:   ${22:enabled_vlans}: ${23:"#"}}
${24:   ${25:fallback_persistence_profile}: ${26:"#"}}
${27:   ${28:firewall_enforced_policy}: ${29:"#"}}
${30:   ${31:firewall_staged_policy}: ${32:"#"}}
${33:   ${34:insert_metadata}: ${35:"#"}}
${36:   ${37:ip_intelligence_policy}: ${38:"#"}}
${39:   ${40:ip_protocol}: ${41:"#"}}
${42:   ${43:irules}: ${44:"#"}}
${45:   ${46:mask}: ${47:"#"}}
${48:   ${49:metadata}: ${50:"#"}}
${51:   ${52:mirror}: ${53:"#"}}
${54:   ${55:name}: ${56:"#"}}
${57:   ${58:partition}: ${59:"#"}}
${60:   ${61:policies}: ${62:"#"}}
${63:   ${64:pool}: ${65:"#"}}
${66:   ${67:port}: ${68:"#"}}
${69:   ${70:port_translation}: ${71:"#"}}
${72:   ${73:profiles}: ${74:"#"}}
${75:   ${76:provider}: ${77:"#"}}
${78:   ${79:rate_limit}: ${80:"#"}}
${81:   ${82:rate_limit_dst_mask}: ${83:"#"}}
${84:   ${85:rate_limit_mode}: ${86:"#"}}
${87:   ${88:rate_limit_src_mask}: ${89:"#"}}
${90:   ${91:security_log_profiles}: ${92:"#"}}
${93:   ${94:security_nat_policy}: ${95:"#"}}
${96:   ${97:snat}: ${98:"#"}}
${99:   ${100:source}: ${101:"#"}}
${102:   ${103:source_port}: ${104:"#"}}
${105:   ${106:state}: ${107:"#"}}
${108:   ${109:type}: ${110:"#"}}
${111:${112:   become: ${113:true}} 
${114:   become_method: ${115:su}} 
${116:   become_user: ${117:nobody}} 
${118:   become_flags: ${119:"-s /bin/sh"}}} 
${120:   when: ${121:variable is defined}} 
${122:   with_items: ${123:array}} 
]]></content>
	<tabTrigger>bigip_virtual_server</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
