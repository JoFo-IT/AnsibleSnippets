<snippet>
<content><![CDATA[
${1:#db = name of database where permissions will be granted
#encrypted = whether the password is stored hashed in the database. boolean. Passwords can be passed already hashed or
#expires = sets the user's password expiration.
#fail_on_user = if `yes', fail when user can't be removed. Otherwise just log and continue
#login_host = Host running PostgreSQL.
#login_password = Password used to authenticate with PostgreSQL
#login_unix_socket = Path to a Unix domain socket for local connections
#login_user = User (role) used to authenticate with PostgreSQL
#name = name of the user (role) to add or remove
#no_password_changes = if `yes', don't inspect database for password changes. Effective when `pg_authid' is not accessible (such as AWS
#password = set the user's password, before 1.4 this was required. When passing an encrypted password, the encrypted
#port = Database port to connect to.
#priv = PostgreSQL privileges string in the format: `table:priv1,priv2'
#role_attr_flags = PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER
#state = The user (role) state
}- name: ${2:Name for postgresql_user module.}
${3:  become: ${4:yes}}
  postgresql_user: ${5:db=${6: } }${7:encrypted=${8: } }${9:expires=${10: } }${11:fail_on_user=${12: } }${13:login_host=${14: } }${15:login_password=${16: } }${17:login_unix_socket=${18: } }${19:login_user=${20: } }${21:name=${22: } }${23:no_password_changes=${24: } }${25:password=${26: } }${27:port=${28: } }${29:priv=${30: } }${31:role_attr_flags=${32: } }${33:state=${34: } }
${35:  when: ${36: variable is defined}}
${37:  with_items: ${38: array}}
]]></content>
	<tabTrigger>postgresql_user</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
