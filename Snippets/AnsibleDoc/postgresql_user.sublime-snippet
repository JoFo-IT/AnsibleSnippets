<snippet>
<content><![CDATA[
${1:# conn_limit: Specifies the user connection limit. 
# db: name of database where permissions will be granted 
# encrypted: whether the password is stored hashed in the database. boolean. Passwords can be passed already hashed 
# expires: sets the user's password expiration. 
# fail_on_user: if `yes', fail when user can't be removed. Otherwise just log and continue 
# login_host: Host running PostgreSQL. 
# login_password: Password used to authenticate with PostgreSQL 
# login_unix_socket: Path to a Unix domain socket for local connections 
# login_user: User (role) used to authenticate with PostgreSQL 
# name: (required) name of the user (role) to add or remove 
# no_password_changes: if `yes', don't inspect database for password changes. Effective when `pg_authid' is not accessible 
# password: set the user's password, before 1.4 this was required. When passing an encrypted password, the encrypted 
# port: Database port to connect to. 
# priv: PostgreSQL privileges string in the format: `table:priv1,priv2' 
# role_attr_flags: PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER 
# ssl_mode: Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the 
# ssl_rootcert: Specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file 
# state: The user (role) state 
}- name: ${2:Name for postgresql_user module.}
  postgresql_user:
${3:   ${4:conn_limit}: ${5:"#"}}
${6:   ${7:db}: ${8:"#"}}
${9:   ${10:encrypted}: ${11:"#"}}
${12:   ${13:expires}: ${14:"#"}}
${15:   ${16:fail_on_user}: ${17:"#"}}
${18:   ${19:login_host}: ${20:"#"}}
${21:   ${22:login_password}: ${23:"#"}}
${24:   ${25:login_unix_socket}: ${26:"#"}}
${27:   ${28:login_user}: ${29:"#"}}
${30:   ${31:name}: ${32:"#"}}
${33:   ${34:no_password_changes}: ${35:"#"}}
${36:   ${37:password}: ${38:"#"}}
${39:   ${40:port}: ${41:"#"}}
${42:   ${43:priv}: ${44:"#"}}
${45:   ${46:role_attr_flags}: ${47:"#"}}
${48:   ${49:ssl_mode}: ${50:"#"}}
${51:   ${52:ssl_rootcert}: ${53:"#"}}
${54:   ${55:state}: ${56:"#"}}
${57:${58:   become: ${59:true}} 
${60:   become_method: ${61:su}} 
${62:   become_user: ${63:nobody}} 
${64:   become_flags: ${65:"-s /bin/sh"}}} 
${66:   when: ${67:variable is defined}} 
${68:   with_items: ${69:array}} 
]]></content>
	<tabTrigger>postgresql_user</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
