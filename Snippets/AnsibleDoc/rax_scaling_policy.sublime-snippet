<snippet>
<content><![CDATA[
${1:#api_key = Rackspace API key (overrides `credentials')
#at = The UTC time when this policy will be executed. The time must be formatted according to `yyyy-MM-
#change = The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a
#cooldown = The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. Must be
#credentials = File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
#cron = The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to `1 0 * *
#desired_capacity = The desired server capacity of the scaling the group; that is, how many servers should be in the scaling group.
#env = Environment as configured in ~/.pyrax.cfg, see
#https = pyrax-
#is_percent = Whether the value in `change' is a percent value
#name = Name to give the policy
#policy_type = The type of policy that will be executed for the current release.
#region = Region to create an instance in
#scaling_group = Name of the scaling group that this policy will be added to
#state = Indicate desired state of the resource
#username = Rackspace username (overrides `credentials')
#verify_ssl = Whether or not to require SSL validation of API endpoints
}- name: ${2:Name for rax_scaling_policy module.}
${3:  become: ${4:yes}}
  rax_scaling_policy: ${5:api_key=${6: } }${7:at=${8: } }${9:change=${10: } }${11:cooldown=${12: } }${13:credentials=${14: } }${15:cron=${16: } }${17:desired_capacity=${18: } }${19:env=${20: } }${21:https=${22: } }${23:is_percent=${24: } }${25:name=${26: } }${27:policy_type=${28: } }${29:region=${30: } }${31:scaling_group=${32: } }${33:state=${34: } }${35:username=${36: } }${37:verify_ssl=${38: } }
${39:  when: ${40: variable is defined}}
${41:  with_items: ${42: array}}
]]></content>
	<tabTrigger>rax_scaling_policy</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
