<snippet>
<content><![CDATA[
${1:# api_key: Rackspace API key, overrides `credentials'. 
# at: The UTC time when this policy will be executed. The time must be formatted according to `yyyy-MM- 
# change: The change, either as a number of servers or as a percentage, to make in the scaling group. If this is a 
# cooldown: The period of time, in seconds, that must pass before any scaling can occur after the previous scaling. 
# credentials: File to find the Rackspace credentials in. Ignored if `api_key' and `username' are provided. 
# cron: The time when the policy will be executed, as a cron entry. For example, if this is parameter is set to 
# desired_capacity: The desired server capacity of the scaling the group; that is, how many servers should be in the scaling 
# env: Environment as configured in `~/.pyrax.cfg', see 
# : pyrax-configuration. 
# is_percent: Whether the value in `change' is a percent value 
# name: (required) Name to give the policy 
# policy_type: (required) The type of policy that will be executed for the current release. 
# region: Region to create an instance in. 
# scaling_group: (required) Name of the scaling group that this policy will be added to 
# state: Indicate desired state of the resource 
# username: Rackspace username, overrides `credentials'. 
# verify_ssl: Whether or not to require SSL validation of API endpoints. 
}- name: ${2:Name for rax_scaling_policy module.}
  rax_scaling_policy:
${3:   ${4:api_key}: ${5:"#"}}
${6:   ${7:at}: ${8:"#"}}
${9:   ${10:change}: ${11:"#"}}
${12:   ${13:cooldown}: ${14:"#"}}
${15:   ${16:credentials}: ${17:"#"}}
${18:   ${19:cron}: ${20:"#"}}
${21:   ${22:desired_capacity}: ${23:"#"}}
${24:   ${25:env}: ${26:"#"}}
${27:   ${28:}: ${29:"#"}}
${30:   ${31:is_percent}: ${32:"#"}}
${33:   ${34:name}: ${35:"#"}}
${36:   ${37:policy_type}: ${38:"#"}}
${39:   ${40:region}: ${41:"#"}}
${42:   ${43:scaling_group}: ${44:"#"}}
${45:   ${46:state}: ${47:"#"}}
${48:   ${49:username}: ${50:"#"}}
${51:   ${52:verify_ssl}: ${53:"#"}}
${54:${55:   become: ${56:true}} 
${57:   become_method: ${58:su}} 
${59:   become_user: ${60:nobody}} 
${61:   become_flags: ${62:"-s /bin/sh"}}} 
${63:   when: ${64:variable is defined}} 
${65:   with_items: ${66:array}} 
]]></content>
	<tabTrigger>rax_scaling_policy</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
