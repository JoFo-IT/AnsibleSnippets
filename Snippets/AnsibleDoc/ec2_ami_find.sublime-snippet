<snippet>
<content><![CDATA[
${1:# ami_id: An AMI ID to match. 
# ami_tags: A hash/dictionary of tags to match for the AMI. 
# architecture: An architecture type to match (e.g. x86_64). 
# hypervisor: A hypervisor type type to match (e.g. xen). 
# is_public: Whether or not the image(s) are public. 
# name: An AMI name to match. 
# no_result_action: What to do when no results are found. 'success' reports success and returns an empty array 'fail' causes 
# owner: Search AMIs owned by the specified owner Can specify an AWS account ID, or one of the special IDs 
# platform: Platform type to match. 
# product_code: Marketplace product code to match. 
# region: (required) The AWS region to use. 
# sort: Optional attribute which with to sort the results. If specifying 'tag', the 'tag_name' parameter is 
# sort_end: Which result to end with (when sorting). Corresponds to Python slice notation. 
# sort_order: Order in which to sort results. Only used when the 'sort' parameter is specified. 
# sort_start: Which result to start with (when sorting). Corresponds to Python slice notation. 
# sort_tag: Tag name with which to sort results. Required when specifying 'sort=tag'. 
# state: AMI state to match. 
# virtualization_type: Virtualization type to match (e.g. hvm). 
}- name: ${2:Name for ec2_ami_find module.}
  ec2_ami_find:
${3:   ${4:ami_id}: ${5:"#"}}
${6:   ${7:ami_tags}: ${8:"#"}}
${9:   ${10:architecture}: ${11:"#"}}
${12:   ${13:hypervisor}: ${14:"#"}}
${15:   ${16:is_public}: ${17:"#"}}
${18:   ${19:name}: ${20:"#"}}
${21:   ${22:no_result_action}: ${23:"#"}}
${24:   ${25:owner}: ${26:"#"}}
${27:   ${28:platform}: ${29:"#"}}
${30:   ${31:product_code}: ${32:"#"}}
${33:   ${34:region}: ${35:"#"}}
${36:   ${37:sort}: ${38:"#"}}
${39:   ${40:sort_end}: ${41:"#"}}
${42:   ${43:sort_order}: ${44:"#"}}
${45:   ${46:sort_start}: ${47:"#"}}
${48:   ${49:sort_tag}: ${50:"#"}}
${51:   ${52:state}: ${53:"#"}}
${54:   ${55:virtualization_type}: ${56:"#"}}
${57:${58:   become: ${59:true}} 
${60:   become_method: ${61:su}} 
${62:   become_user: ${63:nobody}} 
${64:   become_flags: ${65:"-s /bin/sh"}}} 
${66:   when: ${67:variable is defined}} 
${68:   with_items: ${69:array}} 
]]></content>
	<tabTrigger>ec2_ami_find</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
