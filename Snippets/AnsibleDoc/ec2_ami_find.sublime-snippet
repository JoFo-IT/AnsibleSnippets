<snippet>
<content><![CDATA[
${1:#ami_id = An AMI ID to match.
#ami_tags = A hash/dictionary of tags to match for the AMI.
#architecture = An architecture type to match (e.g. x86_64).
#hypervisor = A hypervisor type type to match (e.g. xen).
#is_public = Whether or not the image(s) are public.
#name = An AMI name to match.
#no_result_action = What to do when no results are found. 'success' reports success and returns an empty array 'fail' causes the
#owner = Search AMIs owned by the specified owner Can specify an AWS account ID, or one of the special IDs 'self',
#platform = Platform type to match.
#region = The AWS region to use.
#sort = Optional attribute which with to sort the results. If specifying 'tag', the 'tag_name' parameter is required.
#sort_end = Which result to end with (when sorting). Corresponds to Python slice notation.
#sort_order = Order in which to sort results. Only used when the 'sort' parameter is specified.
#sort_start = Which result to start with (when sorting). Corresponds to Python slice notation.
#sort_tag = Tag name with which to sort results. Required when specifying 'sort=tag'.
#state = AMI state to match.
#virtualization_type = Virtualization type to match (e.g. hvm).
}- name: ${2:Name for ec2_ami_find module.}
${3:  become: ${4:yes}}
  ec2_ami_find: ${5:ami_id=${6: } }${7:ami_tags=${8: } }${9:architecture=${10: } }${11:hypervisor=${12: } }${13:is_public=${14: } }${15:name=${16: } }${17:no_result_action=${18: } }${19:owner=${20: } }${21:platform=${22: } }${23:region=${24: } }${25:sort=${26: } }${27:sort_end=${28: } }${29:sort_order=${30: } }${31:sort_start=${32: } }${33:sort_tag=${34: } }${35:state=${36: } }${37:virtualization_type=${38: } }
${39:  when: ${40: variable is defined}}
${41:  with_items: ${42: array}}
]]></content>
	<tabTrigger>ec2_ami_find</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
