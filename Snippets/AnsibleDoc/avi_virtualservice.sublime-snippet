<snippet>
<content><![CDATA[
${1:# active_standby_se_tag: This configuration only applies if the virtualservice is in legacy active standby ha mode and load 
# analytics_policy: Determines analytics settings for the application. 
# analytics_profile_ref: Specifies settings related to analytics. It is a reference to an object of type analyticsprofile. 
# api_version: Avi API version of to use for Avi API and objects. 
# application_profile_ref: Enable application layer specific features for the virtual service. It is a reference to an object of 
# auto_allocate_floating_ip: Auto-allocate floating/elastic ip from the cloud infrastructure. Field deprecated in 17.1.1. Default 
# auto_allocate_ip: Auto-allocate vip from the provided subnet. Field deprecated in 17.1.1. Default value when not specified 
# availability_zone: Availability-zone to place the virtual service. Field deprecated in 17.1.1. 
# avi_allocated_fip: (internal-use) fip allocated by avi in the cloud infrastructure. Field deprecated in 17.1.1. Default 
# avi_allocated_vip: (internal-use) vip allocated by avi in the cloud infrastructure. Field deprecated in 17.1.1. Default 
# client_auth: Http authentication configuration for protected resources. 
# cloud_config_cksum: Checksum of cloud configuration for vs. Internally set by cloud connector. 
# cloud_ref: It is a reference to an object of type cloud. 
# cloud_type: Enum options - cloud_none, cloud_vcenter, cloud_openstack, cloud_aws, cloud_vca, cloud_apic, 
# connections_rate_limit: Rate limit the incoming connections to this virtual service. 
# content_rewrite: Profile used to match and rewrite strings in request and/or response body. 
# controller: IP address or hostname of the controller. The default value is the environment variable 
# created_by: Creator name. 
# delay_fairness: Select the algorithm for qos fairness. This determines how multiple virtual services sharing the same 
# description: User defined description for the object. 
# discovered_network_ref: (internal-use) discovered networks providing reachability for client facing virtual service ip. This 
# discovered_networks: (internal-use) discovered networks providing reachability for client facing virtual service ip. This 
# discovered_subnet: (internal-use) discovered subnets providing reachability for client facing virtual service ip. This 
# dns_info: Service discovery specific data including fully qualified domain name, type and time-to-live of the dns 
# dns_policies: Dns policies applied on the dns traffic of the virtual service. Field introduced in 17.1.1. 
# east_west_placement: Force placement on all se's in service group (mesos mode only). Default value when not specified in API 
# enable_autogw: Response traffic to clients will be sent back to the source mac address of the connection, rather than 
# enable_rhi: Enable route health injection using the bgp config in the vrf context. 
# enable_rhi_snat: Enable route health injection for source nat'ted floating ip address using the bgp config in the vrf 
# enabled: Enable or disable the virtual service. Default value when not specified in API or module is interpreted 
# floating_ip: Floating ip to associate with this virtual service. Field deprecated in 17.1.1. 
# floating_subnet_uuid: If auto_allocate_floating_ip is true and more than one floating-ip subnets exist, then the subnet for 
# flow_dist: Criteria for flow distribution among ses. Enum options - LOAD_AWARE, CONSISTENT_HASH_SOURCE_IP_ADDRESS, 
# flow_label_type: Criteria for flow labelling. Enum options - NO_LABEL, SERVICE_LABEL. Default value when not specified in 
# fqdn: Dns resolvable, fully qualified domain name of the virtualservice. Only one of 'fqdn' and 'dns_info' 
# host_name_xlate: Translate the host name sent to the servers to this value. Translate the host name sent from servers 
# http_policies: Http policies applied on the data traffic of the virtual service. 
# ign_pool_net_reach: Ignore pool servers network reachability constraints for virtual service placement. Default value when 
# ip_address: Ip address of the virtual service. Field deprecated in 17.1.1. 
# ipam_network_subnet: Subnet and/or network for allocating virtualservice ip by ipam provider module. 
# limit_doser: Limit potential dos attackers who exceed max_cps_per_client significantly to a fraction of 
# max_cps_per_client: Maximum connections per second per client ip. Allowed values are 10-1000. Special values are 0- 
# microservice_ref: Microservice representing the virtual service. It is a reference to an object of type microservice. 
# name: (required) Name for the virtual service. 
# network_profile_ref: Determines network settings such as protocol, tcp or udp, and related options for the protocol. It is a 
# network_ref: Manually override the network on which the virtual service is placed. It is a reference to an object of 
# network_security_policy_ref: Network security policies for the virtual service. It is a reference to an object of type 
# nsx_securitygroup: A list of nsx service groups representing the clients which can access the virtual ip of the virtual 
# password: Password of Avi user in Avi controller. The default value is the environment variable `AVI_PASSWORD'. 
# performance_limits: Optional settings that determine performance limits like max connections or bandwdith etc. 
# pool_group_ref: The pool group is an object that contains pools. It is a reference to an object of type poolgroup. 
# pool_ref: The pool is an object that contains destination servers and related attributes such as load-balancing 
# port_uuid: (internal-use) network port assigned to the virtual service ip address. Field deprecated in 17.1.1. 
# remove_listening_port_on_vs_down: Remove listening port if virtualservice is down. Default value when not specified in API or module is 
# requests_rate_limit: Rate limit the incoming requests to this virtual service. 
# scaleout_ecmp: Disable re-distribution of flows across service engines for a virtual service. Enable if the network 
# se_group_ref: The service engine group to use for this virtual service. Moving to a new se group is disruptive to 
# server_network_profile_ref: Determines the network settings profile for the server side of tcp proxied connections. Leave blank to 
# service_metadata: Metadata pertaining to the service provided by this virtual service. In openshift/kubernetes 
# service_pool_select: Select pool based on destination port. 
# services: List of services defined for this virtual service. 
# sideband_profile: Sideband configuration to be used for this virtualservice.it can be used for sending traffic to sideband 
# snat_ip: Nat'ted floating source ip address(es) for upstream connection to servers. 
# ssl_key_and_certificate_refs: Select or create one or two certificates, ec and/or rsa, that will be presented to ssl/tls terminated 
# ssl_profile_ref: Determines the set of ssl versions and ciphers to accept for ssl/tls terminated connections. It is a 
# ssl_sess_cache_avg_size: Expected number of ssl session cache entries (may be exceeded). Allowed values are 1024-16383. Default 
# state: The state that should be applied on the entity. 
# static_dns_records: List of static dns records applied to this virtual service. These are static entries and no health 
# subnet: Subnet providing reachability for client facing virtual service ip. Field deprecated in 17.1.1. 
# subnet_uuid: It represents subnet for the virtual service ip address allocation when auto_allocate_ip is true.it is 
# tenant: Name of tenant used for all Avi API calls and context of object. 
# tenant_ref: It is a reference to an object of type tenant. 
# tenant_uuid: UUID of tenant used for all Avi API calls and context of object. 
# traffic_clone_profile_ref: Server network or list of servers for cloning traffic. It is a reference to an object of type 
# type: Specify if this is a normal virtual service, or if it is the parent or child of an sni-enabled virtual 
# url: Avi controller URL of the object. 
# use_bridge_ip_as_vip: Use bridge ip as vip on each host in mesos deployments. Default value when not specified in API or 
# username: Username used for accessing Avi controller. The default value is the environment variable 
# uuid: Uuid of the virtualservice. 
# vh_domain_name: The exact name requested from the client's sni-enabled tls hello domain name field. If this is a match, 
# vh_parent_vs_uuid: Specifies the virtual service acting as virtual hosting (sni) parent. 
# vip: List of virtual service ips. While creating a 'shared vs',please use vsvip_ref to point to the shared 
# vrf_context_ref: Virtual routing context that the virtual service is bound to. This is used to provide the isolation of 
# vs_datascripts: Datascripts applied on the data traffic of the virtual service. 
# vsvip_ref: Mostly used during the creation of shared vs, this fieldrefers to entities that can be shared across 
# weight: The quality of service weight to assign to traffic transmitted from this virtual service. A higher 
}- name: ${2:Name for avi_virtualservice module.}
  avi_virtualservice:
${3:   ${4:active_standby_se_tag}: ${5:"#"}}
${6:   ${7:analytics_policy}: ${8:"#"}}
${9:   ${10:analytics_profile_ref}: ${11:"#"}}
${12:   ${13:api_version}: ${14:"#"}}
${15:   ${16:application_profile_ref}: ${17:"#"}}
${18:   ${19:auto_allocate_floating_ip}: ${20:"#"}}
${21:   ${22:auto_allocate_ip}: ${23:"#"}}
${24:   ${25:availability_zone}: ${26:"#"}}
${27:   ${28:avi_allocated_fip}: ${29:"#"}}
${30:   ${31:avi_allocated_vip}: ${32:"#"}}
${33:   ${34:client_auth}: ${35:"#"}}
${36:   ${37:cloud_config_cksum}: ${38:"#"}}
${39:   ${40:cloud_ref}: ${41:"#"}}
${42:   ${43:cloud_type}: ${44:"#"}}
${45:   ${46:connections_rate_limit}: ${47:"#"}}
${48:   ${49:content_rewrite}: ${50:"#"}}
${51:   ${52:controller}: ${53:"#"}}
${54:   ${55:created_by}: ${56:"#"}}
${57:   ${58:delay_fairness}: ${59:"#"}}
${60:   ${61:description}: ${62:"#"}}
${63:   ${64:discovered_network_ref}: ${65:"#"}}
${66:   ${67:discovered_networks}: ${68:"#"}}
${69:   ${70:discovered_subnet}: ${71:"#"}}
${72:   ${73:dns_info}: ${74:"#"}}
${75:   ${76:dns_policies}: ${77:"#"}}
${78:   ${79:east_west_placement}: ${80:"#"}}
${81:   ${82:enable_autogw}: ${83:"#"}}
${84:   ${85:enable_rhi}: ${86:"#"}}
${87:   ${88:enable_rhi_snat}: ${89:"#"}}
${90:   ${91:enabled}: ${92:"#"}}
${93:   ${94:floating_ip}: ${95:"#"}}
${96:   ${97:floating_subnet_uuid}: ${98:"#"}}
${99:   ${100:flow_dist}: ${101:"#"}}
${102:   ${103:flow_label_type}: ${104:"#"}}
${105:   ${106:fqdn}: ${107:"#"}}
${108:   ${109:host_name_xlate}: ${110:"#"}}
${111:   ${112:http_policies}: ${113:"#"}}
${114:   ${115:ign_pool_net_reach}: ${116:"#"}}
${117:   ${118:ip_address}: ${119:"#"}}
${120:   ${121:ipam_network_subnet}: ${122:"#"}}
${123:   ${124:limit_doser}: ${125:"#"}}
${126:   ${127:max_cps_per_client}: ${128:"#"}}
${129:   ${130:microservice_ref}: ${131:"#"}}
${132:   ${133:name}: ${134:"#"}}
${135:   ${136:network_profile_ref}: ${137:"#"}}
${138:   ${139:network_ref}: ${140:"#"}}
${141:   ${142:network_security_policy_ref}: ${143:"#"}}
${144:   ${145:nsx_securitygroup}: ${146:"#"}}
${147:   ${148:password}: ${149:"#"}}
${150:   ${151:performance_limits}: ${152:"#"}}
${153:   ${154:pool_group_ref}: ${155:"#"}}
${156:   ${157:pool_ref}: ${158:"#"}}
${159:   ${160:port_uuid}: ${161:"#"}}
${162:   ${163:remove_listening_port_on_vs_down}: ${164:"#"}}
${165:   ${166:requests_rate_limit}: ${167:"#"}}
${168:   ${169:scaleout_ecmp}: ${170:"#"}}
${171:   ${172:se_group_ref}: ${173:"#"}}
${174:   ${175:server_network_profile_ref}: ${176:"#"}}
${177:   ${178:service_metadata}: ${179:"#"}}
${180:   ${181:service_pool_select}: ${182:"#"}}
${183:   ${184:services}: ${185:"#"}}
${186:   ${187:sideband_profile}: ${188:"#"}}
${189:   ${190:snat_ip}: ${191:"#"}}
${192:   ${193:ssl_key_and_certificate_refs}: ${194:"#"}}
${195:   ${196:ssl_profile_ref}: ${197:"#"}}
${198:   ${199:ssl_sess_cache_avg_size}: ${200:"#"}}
${201:   ${202:state}: ${203:"#"}}
${204:   ${205:static_dns_records}: ${206:"#"}}
${207:   ${208:subnet}: ${209:"#"}}
${210:   ${211:subnet_uuid}: ${212:"#"}}
${213:   ${214:tenant}: ${215:"#"}}
${216:   ${217:tenant_ref}: ${218:"#"}}
${219:   ${220:tenant_uuid}: ${221:"#"}}
${222:   ${223:traffic_clone_profile_ref}: ${224:"#"}}
${225:   ${226:type}: ${227:"#"}}
${228:   ${229:url}: ${230:"#"}}
${231:   ${232:use_bridge_ip_as_vip}: ${233:"#"}}
${234:   ${235:username}: ${236:"#"}}
${237:   ${238:uuid}: ${239:"#"}}
${240:   ${241:vh_domain_name}: ${242:"#"}}
${243:   ${244:vh_parent_vs_uuid}: ${245:"#"}}
${246:   ${247:vip}: ${248:"#"}}
${249:   ${250:vrf_context_ref}: ${251:"#"}}
${252:   ${253:vs_datascripts}: ${254:"#"}}
${255:   ${256:vsvip_ref}: ${257:"#"}}
${258:   ${259:weight}: ${260:"#"}}
${261:${262:   become: ${263:true}} 
${264:   become_method: ${265:su}} 
${266:   become_user: ${267:nobody}} 
${268:   become_flags: ${269:"-s /bin/sh"}}} 
${270:   when: ${271:variable is defined}} 
${272:   with_items: ${273:array}} 
]]></content>
	<tabTrigger>avi_virtualservice</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
