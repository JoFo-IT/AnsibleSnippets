<snippet>
<content><![CDATA[
${1:# active_standby_se_tag: This configuration only applies if the 
# analytics_policy: Determines analytics settings for the 
# analytics_profile_ref: Specifies settings related to analytics. It is a 
# api_context: Avi API context that includes current session ID 
# api_version: Avi API version of to use for Avi API and 
# application_profile_ref: Enable application layer specific features for 
# auto_allocate_floating_ip: Auto-allocate floating/elastic ip from the cloud 
# auto_allocate_ip: Auto-allocate vip from the provided subnet. 
# availability_zone: Availability-zone to place the virtual service. 
# avi_allocated_fip: (internal-use) fip allocated by avi in the cloud 
# avi_allocated_vip: (internal-use) vip allocated by avi in the cloud 
# avi_api_patch_op: Patch operation to use when using 
# avi_api_update_method: Default method for object update is HTTP PUT. 
# avi_credentials: Avi Credentials dictionary which can be used in 
# bulk_sync_kvcache: (this is a beta feature). Sync key-value cache 
# client_auth: Http authentication configuration for protected 
# close_client_conn_on_config_update: Close client connection on vs config update. 
# cloud_config_cksum: Checksum of cloud configuration for vs. 
# cloud_ref: It is a reference to an object of type cloud. 
# cloud_type: Enum options - cloud_none, cloud_vcenter, 
# connections_rate_limit: Rate limit the incoming connections to this 
# content_rewrite: Profile used to match and rewrite strings in 
# controller: IP address or hostname of the controller. The 
# created_by: Creator name. 
# delay_fairness: Select the algorithm for qos fairness. This 
# description: User defined description for the object. 
# discovered_network_ref: (internal-use) discovered networks providing 
# discovered_networks: (internal-use) discovered networks providing 
# discovered_subnet: (internal-use) discovered subnets providing 
# dns_info: Service discovery specific data including fully 
# dns_policies: Dns policies applied on the dns traffic of the 
# east_west_placement: Force placement on all se's in service group 
# enable_autogw: Response traffic to clients will be sent back to 
# enable_rhi: Enable route health injection using the bgp 
# enable_rhi_snat: Enable route health injection for source nat'ted 
# enabled: Enable or disable the virtual service. Default 
# error_page_profile_ref: Error page profile to be used for this 
# floating_ip: Floating ip to associate with this virtual 
# floating_subnet_uuid: If auto_allocate_floating_ip is true and more 
# flow_dist: Criteria for flow distribution among ses. Enum 
# flow_label_type: Criteria for flow labelling. Enum options - 
# fqdn: Dns resolvable, fully qualified domain name of 
# host_name_xlate: Translate the host name sent to the servers to 
# http_policies: Http policies applied on the data traffic of the 
# ign_pool_net_reach: Ignore pool servers network reachability 
# ip_address: Ip address of the virtual service. Field 
# ipam_network_subnet: Subnet and/or network for allocating 
# l4_policies: L4 policies applied to the data traffic of the 
# limit_doser: Limit potential dos attackers who exceed 
# max_cps_per_client: Maximum connections per second per client ip. 
# microservice_ref: Microservice representing the virtual service. 
# name: (required) Name for the virtual service. 
# network_profile_ref: Determines network settings such as protocol, 
# network_ref: Manually override the network on which the 
# network_security_policy_ref: Network security policies for the virtual 
# nsx_securitygroup: A list of nsx service groups representing the 
# password: Password of Avi user in Avi controller. The 
# performance_limits: Optional settings that determine performance 
# pool_group_ref: The pool group is an object that contains pools. 
# pool_ref: The pool is an object that contains destination 
# port_uuid: (internal-use) network port assigned to the 
# remove_listening_port_on_vs_down: Remove listening port if virtualservice is down. 
# requests_rate_limit: Rate limit the incoming requests to this virtual 
# scaleout_ecmp: Disable re-distribution of flows across service 
# se_group_ref: The service engine group to use for this virtual 
# server_network_profile_ref: Determines the network settings profile for the 
# service_metadata: Metadata pertaining to the service provided by 
# service_pool_select: Select pool based on destination port. 
# services: List of services defined for this virtual 
# sideband_profile: Sideband configuration to be used for this 
# snat_ip: Nat'ted floating source ip address(es) for 
# sp_pool_refs: Gslb pools used to manage site-persistence 
# ssl_key_and_certificate_refs: Select or create one or two certificates, ec 
# ssl_profile_ref: Determines the set of ssl versions and ciphers 
# ssl_sess_cache_avg_size: Expected number of ssl session cache entries 
# state: The state that should be applied on the entity. 
# static_dns_records: List of static dns records applied to this 
# subnet: Subnet providing reachability for client facing 
# subnet_uuid: It represents subnet for the virtual service ip 
# tenant: Name of tenant used for all Avi API calls and 
# tenant_ref: It is a reference to an object of type tenant. 
# tenant_uuid: UUID of tenant used for all Avi API calls and 
# traffic_clone_profile_ref: Server network or list of servers for cloning 
# traffic_enabled: Knob to enable the virtual service traffic on 
# type: Specify if this is a normal virtual service, or 
# url: Avi controller URL of the object. 
# use_bridge_ip_as_vip: Use bridge ip as vip on each host in mesos 
# use_vip_as_snat: Use the virtual ip as the snat ip for health 
# username: Username used for accessing Avi controller. The 
# uuid: Uuid of the virtualservice. 
# vh_domain_name: The exact name requested from the client's sni- 
# vh_parent_vs_uuid: Specifies the virtual service acting as virtual 
# vip: List of virtual service ips. While creating a 
# vrf_context_ref: Virtual routing context that the virtual service 
# vs_datascripts: Datascripts applied on the data traffic of the 
# vsvip_ref: Mostly used during the creation of shared vs, 
# waf_policy_ref: Waf policy for the virtual service. It is a 
# weight: The quality of service weight to assign to 
}- name: ${2:Name for avi_virtualservice module.}
  avi_virtualservice:
${3:   ${4:active_standby_se_tag}: ${5:"#"}}
${6:   ${7:analytics_policy}: ${8:"#"}}
${9:   ${10:analytics_profile_ref}: ${11:"#"}}
${12:   ${13:api_context}: ${14:"#"}}
${15:   ${16:api_version}: ${17:"#"}}
${18:   ${19:application_profile_ref}: ${20:"#"}}
${21:   ${22:auto_allocate_floating_ip}: ${23:"#"}}
${24:   ${25:auto_allocate_ip}: ${26:"#"}}
${27:   ${28:availability_zone}: ${29:"#"}}
${30:   ${31:avi_allocated_fip}: ${32:"#"}}
${33:   ${34:avi_allocated_vip}: ${35:"#"}}
${36:   ${37:avi_api_patch_op}: ${38:"#"}}
${39:   ${40:avi_api_update_method}: ${41:"#"}}
${42:   ${43:avi_credentials}: ${44:"#"}}
${45:   ${46:bulk_sync_kvcache}: ${47:"#"}}
${48:   ${49:client_auth}: ${50:"#"}}
${51:   ${52:close_client_conn_on_config_update}: ${53:"#"}}
${54:   ${55:cloud_config_cksum}: ${56:"#"}}
${57:   ${58:cloud_ref}: ${59:"#"}}
${60:   ${61:cloud_type}: ${62:"#"}}
${63:   ${64:connections_rate_limit}: ${65:"#"}}
${66:   ${67:content_rewrite}: ${68:"#"}}
${69:   ${70:controller}: ${71:"#"}}
${72:   ${73:created_by}: ${74:"#"}}
${75:   ${76:delay_fairness}: ${77:"#"}}
${78:   ${79:description}: ${80:"#"}}
${81:   ${82:discovered_network_ref}: ${83:"#"}}
${84:   ${85:discovered_networks}: ${86:"#"}}
${87:   ${88:discovered_subnet}: ${89:"#"}}
${90:   ${91:dns_info}: ${92:"#"}}
${93:   ${94:dns_policies}: ${95:"#"}}
${96:   ${97:east_west_placement}: ${98:"#"}}
${99:   ${100:enable_autogw}: ${101:"#"}}
${102:   ${103:enable_rhi}: ${104:"#"}}
${105:   ${106:enable_rhi_snat}: ${107:"#"}}
${108:   ${109:enabled}: ${110:"#"}}
${111:   ${112:error_page_profile_ref}: ${113:"#"}}
${114:   ${115:floating_ip}: ${116:"#"}}
${117:   ${118:floating_subnet_uuid}: ${119:"#"}}
${120:   ${121:flow_dist}: ${122:"#"}}
${123:   ${124:flow_label_type}: ${125:"#"}}
${126:   ${127:fqdn}: ${128:"#"}}
${129:   ${130:host_name_xlate}: ${131:"#"}}
${132:   ${133:http_policies}: ${134:"#"}}
${135:   ${136:ign_pool_net_reach}: ${137:"#"}}
${138:   ${139:ip_address}: ${140:"#"}}
${141:   ${142:ipam_network_subnet}: ${143:"#"}}
${144:   ${145:l4_policies}: ${146:"#"}}
${147:   ${148:limit_doser}: ${149:"#"}}
${150:   ${151:max_cps_per_client}: ${152:"#"}}
${153:   ${154:microservice_ref}: ${155:"#"}}
${156:   ${157:name}: ${158:"#"}}
${159:   ${160:network_profile_ref}: ${161:"#"}}
${162:   ${163:network_ref}: ${164:"#"}}
${165:   ${166:network_security_policy_ref}: ${167:"#"}}
${168:   ${169:nsx_securitygroup}: ${170:"#"}}
${171:   ${172:password}: ${173:"#"}}
${174:   ${175:performance_limits}: ${176:"#"}}
${177:   ${178:pool_group_ref}: ${179:"#"}}
${180:   ${181:pool_ref}: ${182:"#"}}
${183:   ${184:port_uuid}: ${185:"#"}}
${186:   ${187:remove_listening_port_on_vs_down}: ${188:"#"}}
${189:   ${190:requests_rate_limit}: ${191:"#"}}
${192:   ${193:scaleout_ecmp}: ${194:"#"}}
${195:   ${196:se_group_ref}: ${197:"#"}}
${198:   ${199:server_network_profile_ref}: ${200:"#"}}
${201:   ${202:service_metadata}: ${203:"#"}}
${204:   ${205:service_pool_select}: ${206:"#"}}
${207:   ${208:services}: ${209:"#"}}
${210:   ${211:sideband_profile}: ${212:"#"}}
${213:   ${214:snat_ip}: ${215:"#"}}
${216:   ${217:sp_pool_refs}: ${218:"#"}}
${219:   ${220:ssl_key_and_certificate_refs}: ${221:"#"}}
${222:   ${223:ssl_profile_ref}: ${224:"#"}}
${225:   ${226:ssl_sess_cache_avg_size}: ${227:"#"}}
${228:   ${229:state}: ${230:"#"}}
${231:   ${232:static_dns_records}: ${233:"#"}}
${234:   ${235:subnet}: ${236:"#"}}
${237:   ${238:subnet_uuid}: ${239:"#"}}
${240:   ${241:tenant}: ${242:"#"}}
${243:   ${244:tenant_ref}: ${245:"#"}}
${246:   ${247:tenant_uuid}: ${248:"#"}}
${249:   ${250:traffic_clone_profile_ref}: ${251:"#"}}
${252:   ${253:traffic_enabled}: ${254:"#"}}
${255:   ${256:type}: ${257:"#"}}
${258:   ${259:url}: ${260:"#"}}
${261:   ${262:use_bridge_ip_as_vip}: ${263:"#"}}
${264:   ${265:use_vip_as_snat}: ${266:"#"}}
${267:   ${268:username}: ${269:"#"}}
${270:   ${271:uuid}: ${272:"#"}}
${273:   ${274:vh_domain_name}: ${275:"#"}}
${276:   ${277:vh_parent_vs_uuid}: ${278:"#"}}
${279:   ${280:vip}: ${281:"#"}}
${282:   ${283:vrf_context_ref}: ${284:"#"}}
${285:   ${286:vs_datascripts}: ${287:"#"}}
${288:   ${289:vsvip_ref}: ${290:"#"}}
${291:   ${292:waf_policy_ref}: ${293:"#"}}
${294:   ${295:weight}: ${296:"#"}}
${297:${298:   become: ${299:true}} 
${300:   become_method: ${301:su}} 
${302:   become_user: ${303:nobody}} 
${304:   become_flags: ${305:"-s /bin/sh"}}} 
${306:   when: ${307:variable is defined}} 
${308:   with_items: ${309:array}} 
]]></content>
	<tabTrigger>avi_virtualservice</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
