<snippet>
<content><![CDATA[
${1:#assign_public_ip = when provisioning within vpc, assign a public IP address. Boto library must be 2.13.0+
#aws_access_key = AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment
#aws_secret_key = AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY
#count = number of instances to launch
#count_tag = Used with 'exact_count' to determine how many nodes based on a specific tag criteria should be running.  This
#ebs_optimized = whether instance is using optimized EBS volumes, see
#ec2_url = Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Ignored
#exact_count = An integer value which indicates how many instances that match the 'count_tag' parameter should be running.
#group = security group (or list of groups) to use with the instance
#group_id = security group id (or list of ids) to use with the instance
#image = `ami' ID to use for the instance
#instance_ids = list of instance ids, currently used for states: absent, running, stopped
#instance_profile_name = Name of the IAM instance profile to use. Boto library must be 2.5.0+
#instance_tags = a hash/dictionary of tags to add to the new instance or for starting/stopping instance by tag; '{"key":"value"}'
#instance_type = instance type to use for the instance, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-
#kernel = kernel `eki' to use for the instance
#key_name = key pair to use on the instance
#monitoring = enable detailed monitoring (CloudWatch) for instance
#network_interfaces = A list of existing network interfaces to attach to the instance at launch. When specifying existing network
#placement_group = placement group for the instance when using EC2 Clustered Compute
#private_ip = the private ip address to assign the instance (from the vpc subnet)
#profile = uses a boto profile. Only works with boto >= 2.24.0
#ramdisk = ramdisk `eri' to use for the instance
#region = The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the
#http = ec2_region
#security_token = AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment
#source_dest_check = Enable or Disable the Source/Destination checks (for NAT instances and Virtual Routers)
#spot_price = Maximum spot price to bid, If not set a regular on-demand instance is requested. A spot request is made with
#spot_type = Type of spot request; one of "one-time" or "persistent". Defaults to "one-time" if not supplied.
#spot_wait_timeout = how long to wait for the spot instance request to be fulfilled
#state = create or terminate instances
#tenancy = An instance with a tenancy of "dedicated" runs on single-tenant hardware and can only be launched into a VPC.
#termination_protection = Enable or Disable the Termination Protection
#user_data = opaque blob of data which is made available to the ec2 instance
#validate_certs = When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
#volumes = a list of hash/dictionaries of volumes to add to the new instance; '[{"key":"value", "key":"value"}]'; keys
#vpc_subnet_id = the subnet ID in which to launch the instance (VPC)
#wait = wait for the instance to be 'running' before returning.  Does not wait for SSH, see 'wait_for' example for
#wait_timeout = how long before wait gives up, in seconds
#zone = AWS availability zone in which to launch the instance
}- name: ${2:Name for ec2 module.}
${3:  become: ${4:yes}}
  ec2: ${5:assign_public_ip=${6: } }${7:aws_access_key=${8: } }${9:aws_secret_key=${10: } }${11:count=${12: } }${13:count_tag=${14: } }${15:ebs_optimized=${16: } }${17:ec2_url=${18: } }${19:exact_count=${20: } }${21:group=${22: } }${23:group_id=${24: } }${25:image=${26: } }${27:instance_ids=${28: } }${29:instance_profile_name=${30: } }${31:instance_tags=${32: } }${33:instance_type=${34: } }${35:kernel=${36: } }${37:key_name=${38: } }${39:monitoring=${40: } }${41:network_interfaces=${42: } }${43:placement_group=${44: } }${45:private_ip=${46: } }${47:profile=${48: } }${49:ramdisk=${50: } }${51:region=${52: } }${53:http=${54: } }${55:security_token=${56: } }${57:source_dest_check=${58: } }${59:spot_price=${60: } }${61:spot_type=${62: } }${63:spot_wait_timeout=${64: } }${65:state=${66: } }${67:tenancy=${68: } }${69:termination_protection=${70: } }${71:user_data=${72: } }${73:validate_certs=${74: } }${75:volumes=${76: } }${77:vpc_subnet_id=${78: } }${79:wait=${80: } }${81:wait_timeout=${82: } }${83:zone=${84: } }
${85:  when: ${86: variable is defined}}
${87:  with_items: ${88: array}}
]]></content>
	<tabTrigger>ec2</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
