<snippet>
<content><![CDATA[
${1:# assign_public_ip: when provisioning within vpc, assign a public IP address. Boto library must be 2.13.0+ 
# aws_access_key: AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY 
# aws_secret_key: AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or 
# count: number of instances to launch 
# count_tag: Used with 'exact_count' to determine how many nodes based on a specific tag criteria should be running. 
# ebs_optimized: whether instance is using optimized EBS volumes, see 
# ec2_url: Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). 
# exact_count: An integer value which indicates how many instances that match the 'count_tag' parameter should be 
# group: security group (or list of groups) to use with the instance 
# group_id: security group id (or list of ids) to use with the instance 
# id: identifier for this instance or set of instances, so that the module will be idempotent with respect to 
# image: (required) `ami' ID to use for the instance 
# instance_ids: list of instance ids, currently used for states: absent, running, stopped 
# instance_initiated_shutdown_behavior: Set whether AWS will Stop or Terminate an instance on shutdown. This parameter is ignored when using 
# instance_profile_name: Name of the IAM instance profile to use. Boto library must be 2.5.0+ 
# instance_tags: a hash/dictionary of tags to add to the new instance or for starting/stopping instance by tag; 
# instance_type: (required) instance type to use for the instance, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide 
# kernel: kernel `eki' to use for the instance 
# key_name: key pair to use on the instance 
# monitoring: enable detailed monitoring (CloudWatch) for instance 
# network_interfaces: A list of existing network interfaces to attach to the instance at launch. When specifying existing 
# placement_group: placement group for the instance when using EC2 Clustered Compute 
# private_ip: the private ip address to assign the instance (from the vpc subnet) 
# profile: Uses a boto profile. Only works with boto >= 2.24.0. 
# ramdisk: ramdisk `eri' to use for the instance 
# region: The AWS region to use.  Must be specified if ec2_url is not used. If not specified then the value of the 
# http: ec2_region 
# security_token: AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN 
# source_dest_check: Enable or Disable the Source/Destination checks (for NAT instances and Virtual Routers) 
# spot_launch_group: Launch group for spot request, see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-spot- 
# instances: spot-launch-group 
# spot_price: Maximum spot price to bid, If not set a regular on-demand instance is requested. A spot request is made 
# spot_type: Type of spot request; one of "one-time" or "persistent". Defaults to "one-time" if not supplied. 
# spot_wait_timeout: how long to wait for the spot instance request to be fulfilled 
# state: create or terminate instances 
# tenancy: An instance with a tenancy of "dedicated" runs on single-tenant hardware and can only be launched into a 
# termination_protection: Enable or Disable the Termination Protection 
# user_data: opaque blob of data which is made available to the ec2 instance 
# validate_certs: When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0. 
# volumes: a list of hash/dictionaries of volumes to add to the new instance; '[{"key":"value", "key":"value"}]'; 
# vpc_subnet_id: the subnet ID in which to launch the instance (VPC) 
# wait: wait for the instance to reach its desired state before returning.  Does not wait for SSH, see 
# wait_timeout: how long before wait gives up, in seconds 
# zone: AWS availability zone in which to launch the instance 
}- name: ${2:Name for ec2 module.}
  ec2:
${3:   ${4:assign_public_ip}: ${5:"#"}}
${6:   ${7:aws_access_key}: ${8:"#"}}
${9:   ${10:aws_secret_key}: ${11:"#"}}
${12:   ${13:count}: ${14:"#"}}
${15:   ${16:count_tag}: ${17:"#"}}
${18:   ${19:ebs_optimized}: ${20:"#"}}
${21:   ${22:ec2_url}: ${23:"#"}}
${24:   ${25:exact_count}: ${26:"#"}}
${27:   ${28:group}: ${29:"#"}}
${30:   ${31:group_id}: ${32:"#"}}
${33:   ${34:id}: ${35:"#"}}
${36:   ${37:image}: ${38:"#"}}
${39:   ${40:instance_ids}: ${41:"#"}}
${42:   ${43:instance_initiated_shutdown_behavior}: ${44:"#"}}
${45:   ${46:instance_profile_name}: ${47:"#"}}
${48:   ${49:instance_tags}: ${50:"#"}}
${51:   ${52:instance_type}: ${53:"#"}}
${54:   ${55:kernel}: ${56:"#"}}
${57:   ${58:key_name}: ${59:"#"}}
${60:   ${61:monitoring}: ${62:"#"}}
${63:   ${64:network_interfaces}: ${65:"#"}}
${66:   ${67:placement_group}: ${68:"#"}}
${69:   ${70:private_ip}: ${71:"#"}}
${72:   ${73:profile}: ${74:"#"}}
${75:   ${76:ramdisk}: ${77:"#"}}
${78:   ${79:region}: ${80:"#"}}
${81:   ${82:http}: ${83:"#"}}
${84:   ${85:security_token}: ${86:"#"}}
${87:   ${88:source_dest_check}: ${89:"#"}}
${90:   ${91:spot_launch_group}: ${92:"#"}}
${93:   ${94:instances}: ${95:"#"}}
${96:   ${97:spot_price}: ${98:"#"}}
${99:   ${100:spot_type}: ${101:"#"}}
${102:   ${103:spot_wait_timeout}: ${104:"#"}}
${105:   ${106:state}: ${107:"#"}}
${108:   ${109:tenancy}: ${110:"#"}}
${111:   ${112:termination_protection}: ${113:"#"}}
${114:   ${115:user_data}: ${116:"#"}}
${117:   ${118:validate_certs}: ${119:"#"}}
${120:   ${121:volumes}: ${122:"#"}}
${123:   ${124:vpc_subnet_id}: ${125:"#"}}
${126:   ${127:wait}: ${128:"#"}}
${129:   ${130:wait_timeout}: ${131:"#"}}
${132:   ${133:zone}: ${134:"#"}}
${135:${136:   become: ${137:true}} 
${138:   become_method: ${139:su}} 
${140:   become_user: ${141:nobody}} 
${142:   become_flags: ${143:"-s /bin/sh"}}} 
${144:   when: ${145:variable is defined}} 
${146:   with_items: ${147:array}} 
]]></content>
	<tabTrigger>ec2</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
