<snippet>
<content><![CDATA[
${1:# account_id: (String) Optional parameter that allows to set 
# availability_vs_cost: (required) (String) The strategy orientation. 
# availability_zones: (required) (List of Objects) a list of 
# block_device_mappings: (List of Objects) a list of hash/dictionaries of 
# chef: (Object) The Chef integration configuration.; 
# credentials_path: (String) Optional parameter that allows to set a 
# down_scaling_policies: (List of Objects) a list of hash/dictionaries of 
# draining_timeout: (Integer) Time for instance to be drained from 
# ebs_optimized: (Boolean) Enable EBS optimization for supported 
# ebs_volume_pool: (List of Objects) a list of hash/dictionaries of 
# ecs: (Object) The ECS integration configuration.; 
# elastic_ips: (List of Strings) List of ElasticIps Allocation 
# fallback_to_od: (Boolean) In case of no spots available, 
# health_check_grace_period: (Integer) The amount of time, in seconds, after 
# health_check_type: (String) The service to use for the health 
# health_check_unhealthy_duration_before_replacement: (Integer) Minimal mount of time instance should 
# iam_role_arn: (String) The instance profile iamRole arn Only 
# iam_role_name: (String) The instance profile iamRole name Only 
# id: (String) The group id if it already exists and 
# ignore_changes: (List of Strings) list of fields on which 
# image_id: (required) (String) The image Id used to launch 
# key_pair: (required) (String) Specify a Key Pair to attach 
# kubernetes: (Object) The Kubernetes integration 
# lifetime_period: (String) lifetime period 
# load_balancers: (List of Strings) List of classic ELB names 
# max_size: (required) (Integer) The upper limit number of 
# mesosphere: (Object) The Mesosphere integration 
# min_size: (required) (Integer) The lower limit number of 
# monitoring: (required) (Boolean) Describes whether instance 
# name: (required) (String) Unique name for elastigroup 
# network_interfaces: (List of Objects) a list of hash/dictionaries of 
# on_demand_count: (Integer) Required if risk is not set Number of 
# on_demand_instance_type: (required) (String) On-demand instance type that 
# opsworks: (Object) The elastigroup OpsWorks integration 
# persistence: (Object) The Stateful elastigroup configration.; 
# product: (required) (String) Operation system type._ 
# rancher: (Object) The Rancher integration configuration.; 
# right_scale: (Object) The Rightscale integration 
# risk: (Integer) required if on demand is not set. The 
# roll_config: (Object) Roll configuration.; If you would like 
# scheduled_tasks: (List of Objects) a list of hash/dictionaries of 
# security_group_ids: (required) (List of Strings) One or more 
# shutdown_script: (String) The Base64-encoded shutdown script that 
# signals: (List of Objects) a list of hash/dictionaries of 
# spin_up_time: (Integer) spin up time, in seconds, for the 
# spot_instance_types: (required) (List of Strings) Spot instance type 
# state: (String) create or delete the elastigroup 
# tags: (List of tagKey:tagValue paris) a list of tags 
# target: (required) (Integer) The number of instances to 
# target_group_arns: (List of Strings) List of target group arns 
# target_tracking_policies: (List of Objects) a list of hash/dictionaries of 
# tenancy: (String) dedicated vs shared tenancy 
# terminate_at_end_of_billing_hour: (Boolean) terminate at the end of billing hour 
# uniqueness_by: (String) If your group names are not unique, you 
# unit: (required) (String) The capacity unit to launch 
# up_scaling_policies: (List of Objects) a list of hash/dictionaries of 
# user_data: (String) Base64-encoded MIME user data. Encode 
# utilize_reserved_instances: (Boolean) In case of any available Reserved 
# wait_for_instances: (Boolean) Whether or not the elastigroup 
# wait_timeout: (Integer) How long the module should wait for 
}- name: ${2:Name for spotinst_aws_elastigroup module.}
  spotinst_aws_elastigroup:
${3:   ${4:account_id}: ${5:"#"}}
${6:   ${7:availability_vs_cost}: ${8:"#"}}
${9:   ${10:availability_zones}: ${11:"#"}}
${12:   ${13:block_device_mappings}: ${14:"#"}}
${15:   ${16:chef}: ${17:"#"}}
${18:   ${19:credentials_path}: ${20:"#"}}
${21:   ${22:down_scaling_policies}: ${23:"#"}}
${24:   ${25:draining_timeout}: ${26:"#"}}
${27:   ${28:ebs_optimized}: ${29:"#"}}
${30:   ${31:ebs_volume_pool}: ${32:"#"}}
${33:   ${34:ecs}: ${35:"#"}}
${36:   ${37:elastic_ips}: ${38:"#"}}
${39:   ${40:fallback_to_od}: ${41:"#"}}
${42:   ${43:health_check_grace_period}: ${44:"#"}}
${45:   ${46:health_check_type}: ${47:"#"}}
${48:   ${49:health_check_unhealthy_duration_before_replacement}: ${50:"#"}}
${51:   ${52:iam_role_arn}: ${53:"#"}}
${54:   ${55:iam_role_name}: ${56:"#"}}
${57:   ${58:id}: ${59:"#"}}
${60:   ${61:ignore_changes}: ${62:"#"}}
${63:   ${64:image_id}: ${65:"#"}}
${66:   ${67:key_pair}: ${68:"#"}}
${69:   ${70:kubernetes}: ${71:"#"}}
${72:   ${73:lifetime_period}: ${74:"#"}}
${75:   ${76:load_balancers}: ${77:"#"}}
${78:   ${79:max_size}: ${80:"#"}}
${81:   ${82:mesosphere}: ${83:"#"}}
${84:   ${85:min_size}: ${86:"#"}}
${87:   ${88:monitoring}: ${89:"#"}}
${90:   ${91:name}: ${92:"#"}}
${93:   ${94:network_interfaces}: ${95:"#"}}
${96:   ${97:on_demand_count}: ${98:"#"}}
${99:   ${100:on_demand_instance_type}: ${101:"#"}}
${102:   ${103:opsworks}: ${104:"#"}}
${105:   ${106:persistence}: ${107:"#"}}
${108:   ${109:product}: ${110:"#"}}
${111:   ${112:rancher}: ${113:"#"}}
${114:   ${115:right_scale}: ${116:"#"}}
${117:   ${118:risk}: ${119:"#"}}
${120:   ${121:roll_config}: ${122:"#"}}
${123:   ${124:scheduled_tasks}: ${125:"#"}}
${126:   ${127:security_group_ids}: ${128:"#"}}
${129:   ${130:shutdown_script}: ${131:"#"}}
${132:   ${133:signals}: ${134:"#"}}
${135:   ${136:spin_up_time}: ${137:"#"}}
${138:   ${139:spot_instance_types}: ${140:"#"}}
${141:   ${142:state}: ${143:"#"}}
${144:   ${145:tags}: ${146:"#"}}
${147:   ${148:target}: ${149:"#"}}
${150:   ${151:target_group_arns}: ${152:"#"}}
${153:   ${154:target_tracking_policies}: ${155:"#"}}
${156:   ${157:tenancy}: ${158:"#"}}
${159:   ${160:terminate_at_end_of_billing_hour}: ${161:"#"}}
${162:   ${163:uniqueness_by}: ${164:"#"}}
${165:   ${166:unit}: ${167:"#"}}
${168:   ${169:up_scaling_policies}: ${170:"#"}}
${171:   ${172:user_data}: ${173:"#"}}
${174:   ${175:utilize_reserved_instances}: ${176:"#"}}
${177:   ${178:wait_for_instances}: ${179:"#"}}
${180:   ${181:wait_timeout}: ${182:"#"}}
${183:${184:   become: ${185:true}} 
${186:   become_method: ${187:su}} 
${188:   become_user: ${189:nobody}} 
${190:   become_flags: ${191:"-s /bin/sh"}}} 
${192:   when: ${193:variable is defined}} 
${194:   with_items: ${195:array}} 
]]></content>
	<tabTrigger>spotinst_aws_elastigroup</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
