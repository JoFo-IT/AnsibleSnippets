<snippet>
<content><![CDATA[
${1:# api_key: Token used to authenticate with the API. Can 
# ca_cert: Path to a CA certificate used to authenticate 
# client_cert: Path to a certificate used to authenticate with 
# client_key: Path to a key file used to authenticate with the 
# context: The name of a context found in the config file. 
# host: Provide a URL for accessing the API. Can also be 
# kubeconfig: Path to an existing Kubernetes config file. If 
# merge_type: Whether to override the default patch merge 
# password: Provide a password for authenticating with the 
# path: Path of local image file to transfer. 
# pvc_name: (required) Use to specify the name of the target 
# pvc_namespace: (required) Use to specify the namespace of the 
# upload_host: URL containing the host and port on which the 
# ad: expose-cdi- 
# upload_host_validate_certs: Whether or not to verify the CDI Upload Proxy's 
# username: Provide a username for authenticating with the 
# validate_certs: Whether or not to verify the API server's SSL 
}- name: ${2:Name for kubevirt_cdi_upload module.}
  kubevirt_cdi_upload:
${3:   ${4:api_key}: ${5:"#"}}
${6:   ${7:ca_cert}: ${8:"#"}}
${9:   ${10:client_cert}: ${11:"#"}}
${12:   ${13:client_key}: ${14:"#"}}
${15:   ${16:context}: ${17:"#"}}
${18:   ${19:host}: ${20:"#"}}
${21:   ${22:kubeconfig}: ${23:"#"}}
${24:   ${25:merge_type}: ${26:"#"}}
${27:   ${28:password}: ${29:"#"}}
${30:   ${31:path}: ${32:"#"}}
${33:   ${34:pvc_name}: ${35:"#"}}
${36:   ${37:pvc_namespace}: ${38:"#"}}
${39:   ${40:upload_host}: ${41:"#"}}
${42:   ${43:ad}: ${44:"#"}}
${45:   ${46:upload_host_validate_certs}: ${47:"#"}}
${48:   ${49:username}: ${50:"#"}}
${51:   ${52:validate_certs}: ${53:"#"}}
${54:${55:   become: ${56:true}} 
${57:   become_method: ${58:su}} 
${59:   become_user: ${60:nobody}} 
${61:   become_flags: ${62:"-s /bin/sh"}}} 
${63:   when: ${64:variable is defined}} 
${65:   with_items: ${66:array}} 
]]></content>
	<tabTrigger>kubevirt_cdi_upload</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
