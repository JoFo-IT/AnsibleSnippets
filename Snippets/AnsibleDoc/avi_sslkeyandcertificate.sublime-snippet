<snippet>
<content><![CDATA[
${1:# api_context: Avi API context that includes current session ID 
# api_version: Avi API version of to use for Avi API and 
# avi_api_patch_op: Patch operation to use when using 
# avi_api_update_method: Default method for object update is HTTP PUT. 
# avi_credentials: Avi Credentials dictionary which can be used in 
# avi_disable_session_cache_as_fact: It disables avi session information to be cached 
# ca_certs: Ca certificates in certificate chain. 
# certificate: (required) Sslcertificate settings for 
# certificate_base64: States if the certificate is base64 encoded. 
# certificate_management_profile_ref: It is a reference to an object of type 
# controller: IP address or hostname of the controller. The 
# created_by: Creator name. 
# dynamic_params: Dynamic parameters needed for certificate 
# enckey_base64: Encrypted private key corresponding to the 
# enckey_name: Name of the encrypted private key (e.g. Those 
# format: Format of the key/certificate file. Enum options 
# hardwaresecuritymodulegroup_ref: It is a reference to an object of type 
# key: Private key. 
# key_base64: States if the private key is base64 encoded. 
# key_params: Sslkeyparams settings for sslkeyandcertificate. 
# key_passphrase: Passphrase used to encrypt the private key. 
# name: (required) Name of the object. 
# password: Password of Avi user in Avi controller. The 
# state: The state that should be applied on the entity. 
# status: Enum options - ssl_certificate_finished, 
# tenant: Name of tenant used for all Avi API calls and 
# tenant_ref: It is a reference to an object of type tenant. 
# tenant_uuid: UUID of tenant used for all Avi API calls and 
# type: Enum options - 
# url: Avi controller URL of the object. 
# username: Username used for accessing Avi controller. The 
# uuid: Unique object identifier of the object. 
}- name: ${2:Name for avi_sslkeyandcertificate module.}
  avi_sslkeyandcertificate:
${3:   ${4:api_context}: ${5:"#"}}
${6:   ${7:api_version}: ${8:"#"}}
${9:   ${10:avi_api_patch_op}: ${11:"#"}}
${12:   ${13:avi_api_update_method}: ${14:"#"}}
${15:   ${16:avi_credentials}: ${17:"#"}}
${18:   ${19:avi_disable_session_cache_as_fact}: ${20:"#"}}
${21:   ${22:ca_certs}: ${23:"#"}}
${24:   ${25:certificate}: ${26:"#"}}
${27:   ${28:certificate_base64}: ${29:"#"}}
${30:   ${31:certificate_management_profile_ref}: ${32:"#"}}
${33:   ${34:controller}: ${35:"#"}}
${36:   ${37:created_by}: ${38:"#"}}
${39:   ${40:dynamic_params}: ${41:"#"}}
${42:   ${43:enckey_base64}: ${44:"#"}}
${45:   ${46:enckey_name}: ${47:"#"}}
${48:   ${49:format}: ${50:"#"}}
${51:   ${52:hardwaresecuritymodulegroup_ref}: ${53:"#"}}
${54:   ${55:key}: ${56:"#"}}
${57:   ${58:key_base64}: ${59:"#"}}
${60:   ${61:key_params}: ${62:"#"}}
${63:   ${64:key_passphrase}: ${65:"#"}}
${66:   ${67:name}: ${68:"#"}}
${69:   ${70:password}: ${71:"#"}}
${72:   ${73:state}: ${74:"#"}}
${75:   ${76:status}: ${77:"#"}}
${78:   ${79:tenant}: ${80:"#"}}
${81:   ${82:tenant_ref}: ${83:"#"}}
${84:   ${85:tenant_uuid}: ${86:"#"}}
${87:   ${88:type}: ${89:"#"}}
${90:   ${91:url}: ${92:"#"}}
${93:   ${94:username}: ${95:"#"}}
${96:   ${97:uuid}: ${98:"#"}}
${99:${100:   become: ${101:true}} 
${102:   become_method: ${103:su}} 
${104:   become_user: ${105:nobody}} 
${106:   become_flags: ${107:"-s /bin/sh"}}} 
${108:   when: ${109:variable is defined}} 
${110:   with_items: ${111:array}} 
]]></content>
	<tabTrigger>avi_sslkeyandcertificate</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
