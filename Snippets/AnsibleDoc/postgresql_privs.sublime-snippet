<snippet>
<content><![CDATA[
${1:#database = Name of database to connect to. Alias: `db'
#grant_option = Whether `role' may grant/revoke the specified privileges/group memberships to others. Set to `no' to revoke
#host = Database host address. If unspecified, connect via Unix socket. Alias: `login_host'
#login = The username to authenticate with. Alias: `login_user'
#objs = Comma separated list of database objects to set privileges on. If `type' is `table' or `sequence', the special
#password = The password to authenticate with. Alias: `login_password')
#port = Database port to connect to.
#privs = Comma separated list of privileges to grant/revoke. Alias: `priv'
#roles = Comma separated list of role (user/group) names to set permissions for. The special value `PUBLIC' can be
#schema = Schema that contains the database objects specified via `objs'. May only be provided if `type' is `table',
#state = If `present', the specified privileges are granted, if `absent' they are revoked.
#type = Type of database object to set privileges on.
#unix_socket = Path to a Unix domain socket for local connections. Alias: `login_unix_socket'
}- name: ${2:Name for postgresql_privs module.}
${3:  become: ${4:yes}}
  postgresql_privs: ${5:database=${6: } }${7:grant_option=${8: } }${9:host=${10: } }${11:login=${12: } }${13:objs=${14: } }${15:password=${16: } }${17:port=${18: } }${19:privs=${20: } }${21:roles=${22: } }${23:schema=${24: } }${25:state=${26: } }${27:type=${28: } }${29:unix_socket=${30: } }
${31:  when: ${32: variable is defined}}
${33:  with_items: ${34: array}}
]]></content>
	<tabTrigger>postgresql_privs</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
