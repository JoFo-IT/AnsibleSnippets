<snippet>
<content><![CDATA[
${1:# ca_cert: Specifies the name of a file containing SSL 
# database: (required) Name of database to connect to. 
# fail_on_role: If `yes', fail when target role (for whom privs 
# grant_option: Whether `role' may grant/revoke the specified 
# host: Database host address. If unspecified, connect 
# login: The username to authenticate with. 
# login_host: Host running the database. 
# login_password: The password used to authenticate with. 
# login_unix_socket: Path to a Unix domain socket for local 
# login_user: The username used to authenticate with. 
# objs: Comma separated list of database objects to set 
# password: The password to authenticate with. 
# port: Database port to connect to. 
# privs: Comma separated list of privileges to 
# roles: (required) Comma separated list of role 
# schema: Schema that contains the database objects 
# session_role: Switch to session_role after connecting. The 
# ssl_mode: Determines whether or with what priority a 
# state: If `present', the specified privileges are 
# target_roles: A list of existing role (user/group) names to 
# type: Type of database object to set privileges on. 
# unix_socket: Path to a Unix domain socket for local 
}- name: ${2:Name for postgresql_privs module.}
  postgresql_privs:
${3:   ${4:ca_cert}: ${5:"#"}}
${6:   ${7:database}: ${8:"#"}}
${9:   ${10:fail_on_role}: ${11:"#"}}
${12:   ${13:grant_option}: ${14:"#"}}
${15:   ${16:host}: ${17:"#"}}
${18:   ${19:login}: ${20:"#"}}
${21:   ${22:login_host}: ${23:"#"}}
${24:   ${25:login_password}: ${26:"#"}}
${27:   ${28:login_unix_socket}: ${29:"#"}}
${30:   ${31:login_user}: ${32:"#"}}
${33:   ${34:objs}: ${35:"#"}}
${36:   ${37:password}: ${38:"#"}}
${39:   ${40:port}: ${41:"#"}}
${42:   ${43:privs}: ${44:"#"}}
${45:   ${46:roles}: ${47:"#"}}
${48:   ${49:schema}: ${50:"#"}}
${51:   ${52:session_role}: ${53:"#"}}
${54:   ${55:ssl_mode}: ${56:"#"}}
${57:   ${58:state}: ${59:"#"}}
${60:   ${61:target_roles}: ${62:"#"}}
${63:   ${64:type}: ${65:"#"}}
${66:   ${67:unix_socket}: ${68:"#"}}
${69:${70:   become: ${71:true}} 
${72:   become_method: ${73:su}} 
${74:   become_user: ${75:nobody}} 
${76:   become_flags: ${77:"-s /bin/sh"}}} 
${78:   when: ${79:variable is defined}} 
${80:   with_items: ${81:array}} 
]]></content>
	<tabTrigger>postgresql_privs</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
