<snippet>
<content><![CDATA[
${1:# access_modes: Contains the desired access modes the volume 
# volumes: access- 
# annotations: Annotations attached to this object. 
# api_key: Token used to authenticate with the API. Can 
# ca_cert: Path to a CA certificate used to authenticate 
# cdi_source: If data is to be copied onto the PVC using the 
# : https3registry- 
# client_cert: Path to a certificate used to authenticate with 
# client_key: Path to a key file used to authenticate with the 
# context: The name of a context found in the config file. 
# force: If set to `True', and `state' is `present', an 
# host: Provide a URL for accessing the API. Can also be 
# kubeconfig: Path to an existing Kubernetes config file. If 
# labels: Labels attached to this object. 
# merge_type: Whether to override the default patch merge 
# patch: use-a 
# name: (required) Use to specify a PVC object name. 
# namespace: (required) Use to specify a PVC object 
# password: Provide a password for authenticating with the 
# proxy: The URL of an HTTP proxy to use for the 
# resource_definition: A partial YAML definition of the PVC object 
# selector: A label query over volumes to consider for 
# size: How much storage to allocate to the PVC. 
# state: Determines if an object should be created, 
# storage_class_name: Name of the StorageClass required by the claim. 
# volumes: class-1 
# username: Provide a username for authenticating with the 
# validate_certs: Whether or not to verify the API server's SSL 
# volume_mode: This defines what type of volume is required by 
# volume_name: This is the binding reference to the 
# wait: If set, this module will wait for the PVC to 
# wait_timeout: Specifies how much time in seconds to wait for 
}- name: ${2:Name for kubevirt_pvc module.}
  kubevirt_pvc:
${3:   ${4:access_modes}: ${5:"#"}}
${6:   ${7:volumes}: ${8:"#"}}
${9:   ${10:annotations}: ${11:"#"}}
${12:   ${13:api_key}: ${14:"#"}}
${15:   ${16:ca_cert}: ${17:"#"}}
${18:   ${19:cdi_source}: ${20:"#"}}
${21:   ${22:}: ${23:"#"}}
${24:   ${25:client_cert}: ${26:"#"}}
${27:   ${28:client_key}: ${29:"#"}}
${30:   ${31:context}: ${32:"#"}}
${33:   ${34:force}: ${35:"#"}}
${36:   ${37:host}: ${38:"#"}}
${39:   ${40:kubeconfig}: ${41:"#"}}
${42:   ${43:labels}: ${44:"#"}}
${45:   ${46:merge_type}: ${47:"#"}}
${48:   ${49:patch}: ${50:"#"}}
${51:   ${52:name}: ${53:"#"}}
${54:   ${55:namespace}: ${56:"#"}}
${57:   ${58:password}: ${59:"#"}}
${60:   ${61:proxy}: ${62:"#"}}
${63:   ${64:resource_definition}: ${65:"#"}}
${66:   ${67:selector}: ${68:"#"}}
${69:   ${70:size}: ${71:"#"}}
${72:   ${73:state}: ${74:"#"}}
${75:   ${76:storage_class_name}: ${77:"#"}}
${78:   ${79:volumes}: ${80:"#"}}
${81:   ${82:username}: ${83:"#"}}
${84:   ${85:validate_certs}: ${86:"#"}}
${87:   ${88:volume_mode}: ${89:"#"}}
${90:   ${91:volume_name}: ${92:"#"}}
${93:   ${94:wait}: ${95:"#"}}
${96:   ${97:wait_timeout}: ${98:"#"}}
${99:${100:   become: ${101:true}} 
${102:   become_method: ${103:su}} 
${104:   become_user: ${105:nobody}} 
${106:   become_flags: ${107:"-s /bin/sh"}}} 
${108:   when: ${109:variable is defined}} 
${110:   with_items: ${111:array}} 
]]></content>
	<tabTrigger>kubevirt_pvc</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
