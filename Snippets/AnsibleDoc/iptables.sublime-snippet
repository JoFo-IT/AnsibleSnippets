<snippet>
<content><![CDATA[
${1:# action: Whether the rule should be appended at the 
# chain: Chain to operate on. This option can either be 
# comment: This specifies a comment that will be added to 
# ctstate: `ctstate' is a list of the connection states to 
# destination: Destination specification. Address can be either 
# destination_port: Destination port or port range specification. 
# flush: Flushes the specified table and chain of all 
# fragment: This means that the rule only refers to second 
# goto: This specifies that the processing should 
# icmp_type: This allows specification of the ICMP type, 
# in_interface: Name of an interface via which a packet was 
# ip_version: Which version of the IP protocol this rule 
# jump: This specifies the target of the rule; i.e., 
# limit: Specifies the maximum average number of matches 
# limit_burst: Specifies the maximum burst before the above 
# log_prefix: Specifies a log text for the rule. Only make 
# match: Specifies a match to use, that is, an extension 
# out_interface: Name of an interface via which a packet is going 
# policy: Set the policy for the chain to the given 
# protocol: The protocol of the rule or of the packet to 
# reject_with: Specifies the error packet type to return while 
# rule_num: Insert the rule as the given rule number. This 
# set_counters: This enables the administrator to initialize the 
# set_dscp_mark: This allows specifying a DSCP mark to be added 
# set_dscp_mark_class: This allows specifying a predefined DiffServ 
# source: Source specification. Address can be either a 
# source_port: Source port or port range specification. This 
# state: Whether the rule should be absent or present. 
# syn: This allows matching packets that have the SYN 
# table: This option specifies the packet matching table 
# tcp_flags: TCP flags specification. `tcp_flags' expects a 
# to_destination: This specifies a destination address to use with 
# to_ports: This specifies a destination port or range of 
# to_source: This specifies a source address to use with 
# uid_owner: Specifies the UID or username to use in match by 
}- name: ${2:Name for iptables module.}
  iptables:
${3:   ${4:action}: ${5:"#"}}
${6:   ${7:chain}: ${8:"#"}}
${9:   ${10:comment}: ${11:"#"}}
${12:   ${13:ctstate}: ${14:"#"}}
${15:   ${16:destination}: ${17:"#"}}
${18:   ${19:destination_port}: ${20:"#"}}
${21:   ${22:flush}: ${23:"#"}}
${24:   ${25:fragment}: ${26:"#"}}
${27:   ${28:goto}: ${29:"#"}}
${30:   ${31:icmp_type}: ${32:"#"}}
${33:   ${34:in_interface}: ${35:"#"}}
${36:   ${37:ip_version}: ${38:"#"}}
${39:   ${40:jump}: ${41:"#"}}
${42:   ${43:limit}: ${44:"#"}}
${45:   ${46:limit_burst}: ${47:"#"}}
${48:   ${49:log_prefix}: ${50:"#"}}
${51:   ${52:match}: ${53:"#"}}
${54:   ${55:out_interface}: ${56:"#"}}
${57:   ${58:policy}: ${59:"#"}}
${60:   ${61:protocol}: ${62:"#"}}
${63:   ${64:reject_with}: ${65:"#"}}
${66:   ${67:rule_num}: ${68:"#"}}
${69:   ${70:set_counters}: ${71:"#"}}
${72:   ${73:set_dscp_mark}: ${74:"#"}}
${75:   ${76:set_dscp_mark_class}: ${77:"#"}}
${78:   ${79:source}: ${80:"#"}}
${81:   ${82:source_port}: ${83:"#"}}
${84:   ${85:state}: ${86:"#"}}
${87:   ${88:syn}: ${89:"#"}}
${90:   ${91:table}: ${92:"#"}}
${93:   ${94:tcp_flags}: ${95:"#"}}
${96:   ${97:to_destination}: ${98:"#"}}
${99:   ${100:to_ports}: ${101:"#"}}
${102:   ${103:to_source}: ${104:"#"}}
${105:   ${106:uid_owner}: ${107:"#"}}
${108:${109:   become: ${110:true}} 
${111:   become_method: ${112:su}} 
${113:   become_user: ${114:nobody}} 
${115:   become_flags: ${116:"-s /bin/sh"}}} 
${117:   when: ${118:variable is defined}} 
${119:   with_items: ${120:array}} 
]]></content>
	<tabTrigger>iptables</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
