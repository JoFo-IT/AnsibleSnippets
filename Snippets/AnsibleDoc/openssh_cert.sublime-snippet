<snippet>
<content><![CDATA[
${1:# attributes: The attributes the resulting file or directory 
# force: Should the certificate be regenerated even if it 
# group: Name of the group that should own the 
# identifier: Specify the key identity when signing a public 
# mode: The permissions the resulting file or directory 
# options: Specify certificate options when signing a key. 
# owner: Name of the user that should own the 
# path: (required) Path of the file containing the 
# principals: Certificates may be limited to be valid for a 
# public_key: (required) The path to the public key that will 
# selevel: The level part of the SELinux file context. This 
# serial_number: Specify the certificate serial number. The 
# serole: The role part of the SELinux file context. When 
# setype: The type part of the SELinux file context. When 
# seuser: The user part of the SELinux file context. By 
# signing_key: (required) The path to the private openssh key 
# state: Whether the host or user certificate should 
# type: (required) Whether the module should generate a 
# unsafe_writes: Influence when to use atomic operation to 
# valid_at: Check if the certificate is valid at a certain 
# valid_from: (required) The point in time the certificate is 
# valid_to: (required) The point in time the certificate is 
}- name: ${2:Name for openssh_cert module.}
  openssh_cert:
${3:   ${4:attributes}: ${5:"#"}}
${6:   ${7:force}: ${8:"#"}}
${9:   ${10:group}: ${11:"#"}}
${12:   ${13:identifier}: ${14:"#"}}
${15:   ${16:mode}: ${17:"#"}}
${18:   ${19:options}: ${20:"#"}}
${21:   ${22:owner}: ${23:"#"}}
${24:   ${25:path}: ${26:"#"}}
${27:   ${28:principals}: ${29:"#"}}
${30:   ${31:public_key}: ${32:"#"}}
${33:   ${34:selevel}: ${35:"#"}}
${36:   ${37:serial_number}: ${38:"#"}}
${39:   ${40:serole}: ${41:"#"}}
${42:   ${43:setype}: ${44:"#"}}
${45:   ${46:seuser}: ${47:"#"}}
${48:   ${49:signing_key}: ${50:"#"}}
${51:   ${52:state}: ${53:"#"}}
${54:   ${55:type}: ${56:"#"}}
${57:   ${58:unsafe_writes}: ${59:"#"}}
${60:   ${61:valid_at}: ${62:"#"}}
${63:   ${64:valid_from}: ${65:"#"}}
${66:   ${67:valid_to}: ${68:"#"}}
${69:${70:   become: ${71:true}} 
${72:   become_method: ${73:su}} 
${74:   become_user: ${75:nobody}} 
${76:   become_flags: ${77:"-s /bin/sh"}}} 
${78:   when: ${79:variable is defined}} 
${80:   with_items: ${81:array}} 
]]></content>
	<tabTrigger>openssh_cert</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
