<snippet>
<content><![CDATA[
${1:# allow_partial_import: Boolean indication whether to allow partial registration of a template when `state' is registered. 
# auth: (required) Dictionary with values needed to create HTTP/HTTPS connection to oVirt: 
# clone_permissions: If `True' then the permissions of the VM (only the direct ones, not the inherited ones) will be copied 
# cluster: Name of the cluster, where template should be created/imported. 
# cpu_profile: CPU profile to be set to template. 
# description: Description of the template. 
# exclusive: When `state' is `exported' this parameter indicates if the existing templates with the same name should 
# export_domain: When `state' is `exported' or `imported' this parameter specifies the name of the export storage domain. 
# fetch_nested: If `True' the module will fetch additional data from the API. It will fetch IDs of the VMs disks, 
# id: ID of the template to be registered. 
# image_disk: When `state' is `imported' and `image_provider' is used this parameter specifies the name of disk to be 
# image_provider: When `state' is `imported' this parameter specifies the name of the image provider to be used. 
# name: Name of the template to manage. 
# nested_attributes: Specifies list of the attributes which should be fetched from the API. This parameter apply only when 
# poll_interval: Number of the seconds the module waits until another poll request on entity status is sent. 
# state: Should the template be present/absent/exported/imported/registered. When `state' is `registered' and the 
# storage_domain: When `state' is `imported' this parameter specifies the name of the destination data storage domain. 
# template_image_disk_name: When `state' is `imported' and `image_provider' is used this parameter specifies the new name for 
# timeout: The amount of time in seconds the module should wait for the instance to get into desired state. 
# vm: Name of the VM, which will be used to create template. 
# wait: `True' if the module should wait for the entity to get into desired state. 
}- name: ${2:Name for ovirt_templates module.}
  ovirt_templates:
${3:   ${4:allow_partial_import}: ${5:"#"}}
${6:   ${7:auth}: ${8:"#"}}
${9:   ${10:clone_permissions}: ${11:"#"}}
${12:   ${13:cluster}: ${14:"#"}}
${15:   ${16:cpu_profile}: ${17:"#"}}
${18:   ${19:description}: ${20:"#"}}
${21:   ${22:exclusive}: ${23:"#"}}
${24:   ${25:export_domain}: ${26:"#"}}
${27:   ${28:fetch_nested}: ${29:"#"}}
${30:   ${31:id}: ${32:"#"}}
${33:   ${34:image_disk}: ${35:"#"}}
${36:   ${37:image_provider}: ${38:"#"}}
${39:   ${40:name}: ${41:"#"}}
${42:   ${43:nested_attributes}: ${44:"#"}}
${45:   ${46:poll_interval}: ${47:"#"}}
${48:   ${49:state}: ${50:"#"}}
${51:   ${52:storage_domain}: ${53:"#"}}
${54:   ${55:template_image_disk_name}: ${56:"#"}}
${57:   ${58:timeout}: ${59:"#"}}
${60:   ${61:vm}: ${62:"#"}}
${63:   ${64:wait}: ${65:"#"}}
${66:${67:   become: ${68:true}} 
${69:   become_method: ${70:su}} 
${71:   become_user: ${72:nobody}} 
${73:   become_flags: ${74:"-s /bin/sh"}}} 
${75:   when: ${76:variable is defined}} 
${77:   with_items: ${78:array}} 
]]></content>
	<tabTrigger>ovirt_templates</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
