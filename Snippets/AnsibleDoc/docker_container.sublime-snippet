<snippet>
<content><![CDATA[
${1:# api_version: The version of the Docker API running on the 
# auto_remove: Enable auto-removal of the container on daemon 
# blkio_weight: Block IO (relative weight), between 10 and 1000. 
# ca_cert: Use a CA certificate when performing server 
# cap_drop: List of capabilities to drop from the container. 
# capabilities: List of capabilities to add to the container. 
# cleanup: Use with `detach=false' to remove the container 
# client_cert: Path to the client's TLS certificate file. If 
# client_key: Path to the client's TLS key file. If the value 
# command: Command to execute when the container starts. A 
# comparisons: Allows to specify how properties of existing 
# cpu_period: Limit CPU CFS (Completely Fair Scheduler) 
# cpu_quota: Limit CPU CFS (Completely Fair Scheduler) quota. 
# cpu_shares: CPU shares (relative weight). 
# cpuset_cpus: CPUs in which to allow execution `1,3' or `1-3'. 
# cpuset_mems: Memory nodes (MEMs) in which to allow execution 
# debug: Debug mode 
# detach: Enable detached mode to leave the container 
# device_read_bps: List of device path and read rate (bytes per 
# device_read_iops: List of device and read rate (IO per second) 
# device_write_bps: List of device and write rate (bytes per second) 
# device_write_iops: List of device and write rate (IO per second) to 
# devices: List of host device bindings to add to the 
# dns_opts: List of DNS options. 
# dns_search_domains: List of custom DNS search domains. 
# dns_servers: List of custom DNS servers. 
# docker_host: The URL or Unix socket path used to connect to 
# domainname: Container domainname. 
# entrypoint: Command that overwrites the default `ENTRYPOINT' 
# env: Dictionary of key,value pairs. Values which 
# env_file: Path to a file, present on the target, 
# etc_hosts: Dict of host-to-IP mappings, where each host 
# exposed_ports: List of additional container ports which informs 
# force_kill: Use the kill command when stopping a running 
# groups: List of additional group names and/or IDs that 
# healthcheck: Configure a check that is run to determine 
# der: healthcheck) 
# hostname: The container's hostname. 
# ignore_image: When `state' is `present' or `started', the 
# image: Repository path and tag used to create the 
# init: Run an init inside the container that forwards 
# interactive: Keep stdin open after a container is launched, 
# ipc_mode: Set the IPC mode for the container. Can be one 
# keep_volumes: Retain volumes associated with a removed 
# kernel_memory: Kernel memory limit in format 
# kill_signal: Override default signal used to kill a running 
# labels: Dictionary of key value pairs. 
# links: List of name aliases for linked containers in 
# log_driver: Specify the logging driver. Docker uses `json- 
# log_options: Dictionary of options specific to the chosen 
# mac_address: Container MAC address (e.g. 92:d0:c6:0a:29:33). 
# memory: Memory limit in format `<number>[<unit>]'. 
# memory_reservation: Memory soft limit in format `<number>[<unit>]'. 
# memory_swap: Total memory limit (memory + swap) in format 
# memory_swappiness: Tune a container's memory swappiness behavior. 
# mounts: Specification for mounts to be added to the 
# name: (required) Assign a name to a new container or 
# network_mode: Connect the container to a network. Choices are 
# networks: List of networks the container belongs to. For 
# networks_cli_compatible: When networks are provided to the module via the 
# oom_killer: Whether or not to disable OOM Killer for the 
# oom_score_adj: An integer value containing the score given to 
# output_logs: If set to true, output of the container command 
# paused: Use with the started state to pause running 
# pid_mode: Set the PID namespace mode for the container. 
# pids_limit: Set PIDs limit for the container. It accepts an 
# privileged: Give extended privileges to the container. 
# published_ports: List of ports to publish from the container to 
# pull: If true, always pull the latest version of an 
# purge_networks: Remove the container from ALL networks not 
# read_only: Mount the container's root file system as read- 
# recreate: Use with present and started states to force the 
# restart: Use with started state to force a matching 
# restart_policy: Container restart policy. Place quotes around 
# restart_retries: Use with restart policy to control maximum 
# runtime: Runtime to use for the container. 
# security_opts: List of security options in the form of 
# shm_size: Size of `/dev/shm' in format `<number>[<unit>]'. 
# ssl_version: Provide a valid SSL version number. Default 
# state: `absent' - A container matching the specified 
# stop_signal: Override default signal used to stop the 
# stop_timeout: Number of seconds to wait for the container to 
# sysctls: Dictionary of key,value pairs. 
# timeout: The maximum amount of time in seconds to wait on 
# tls: Secure the connection to the API by using TLS 
# tls_hostname: When verifying the authenticity of the Docker 
# tmpfs: Mount a tmpfs directory. 
# trust_image_content: If `yes', skip image verification. 
# tty: Allocate a pseudo-TTY. 
# ulimits: List of ulimit options. A ulimit is specified as 
# user: Sets the username or UID used and optionally the 
# userns_mode: Set the user namespace mode for the container. 
# uts: Set the UTS namespace mode for the container. 
# validate_certs: Secure the connection to the API by using TLS 
# volume_driver: The container volume driver. 
# volumes: List of volumes to mount within the container. 
# volumes_from: List of container names or IDs to get volumes 
# working_dir: Path to the working directory. 
}- name: ${2:Name for docker_container module.}
  docker_container:
${3:   ${4:api_version}: ${5:"#"}}
${6:   ${7:auto_remove}: ${8:"#"}}
${9:   ${10:blkio_weight}: ${11:"#"}}
${12:   ${13:ca_cert}: ${14:"#"}}
${15:   ${16:cap_drop}: ${17:"#"}}
${18:   ${19:capabilities}: ${20:"#"}}
${21:   ${22:cleanup}: ${23:"#"}}
${24:   ${25:client_cert}: ${26:"#"}}
${27:   ${28:client_key}: ${29:"#"}}
${30:   ${31:command}: ${32:"#"}}
${33:   ${34:comparisons}: ${35:"#"}}
${36:   ${37:cpu_period}: ${38:"#"}}
${39:   ${40:cpu_quota}: ${41:"#"}}
${42:   ${43:cpu_shares}: ${44:"#"}}
${45:   ${46:cpuset_cpus}: ${47:"#"}}
${48:   ${49:cpuset_mems}: ${50:"#"}}
${51:   ${52:debug}: ${53:"#"}}
${54:   ${55:detach}: ${56:"#"}}
${57:   ${58:device_read_bps}: ${59:"#"}}
${60:   ${61:device_read_iops}: ${62:"#"}}
${63:   ${64:device_write_bps}: ${65:"#"}}
${66:   ${67:device_write_iops}: ${68:"#"}}
${69:   ${70:devices}: ${71:"#"}}
${72:   ${73:dns_opts}: ${74:"#"}}
${75:   ${76:dns_search_domains}: ${77:"#"}}
${78:   ${79:dns_servers}: ${80:"#"}}
${81:   ${82:docker_host}: ${83:"#"}}
${84:   ${85:domainname}: ${86:"#"}}
${87:   ${88:entrypoint}: ${89:"#"}}
${90:   ${91:env}: ${92:"#"}}
${93:   ${94:env_file}: ${95:"#"}}
${96:   ${97:etc_hosts}: ${98:"#"}}
${99:   ${100:exposed_ports}: ${101:"#"}}
${102:   ${103:force_kill}: ${104:"#"}}
${105:   ${106:groups}: ${107:"#"}}
${108:   ${109:healthcheck}: ${110:"#"}}
${111:   ${112:der}: ${113:"#"}}
${114:   ${115:hostname}: ${116:"#"}}
${117:   ${118:ignore_image}: ${119:"#"}}
${120:   ${121:image}: ${122:"#"}}
${123:   ${124:init}: ${125:"#"}}
${126:   ${127:interactive}: ${128:"#"}}
${129:   ${130:ipc_mode}: ${131:"#"}}
${132:   ${133:keep_volumes}: ${134:"#"}}
${135:   ${136:kernel_memory}: ${137:"#"}}
${138:   ${139:kill_signal}: ${140:"#"}}
${141:   ${142:labels}: ${143:"#"}}
${144:   ${145:links}: ${146:"#"}}
${147:   ${148:log_driver}: ${149:"#"}}
${150:   ${151:log_options}: ${152:"#"}}
${153:   ${154:mac_address}: ${155:"#"}}
${156:   ${157:memory}: ${158:"#"}}
${159:   ${160:memory_reservation}: ${161:"#"}}
${162:   ${163:memory_swap}: ${164:"#"}}
${165:   ${166:memory_swappiness}: ${167:"#"}}
${168:   ${169:mounts}: ${170:"#"}}
${171:   ${172:name}: ${173:"#"}}
${174:   ${175:network_mode}: ${176:"#"}}
${177:   ${178:networks}: ${179:"#"}}
${180:   ${181:networks_cli_compatible}: ${182:"#"}}
${183:   ${184:oom_killer}: ${185:"#"}}
${186:   ${187:oom_score_adj}: ${188:"#"}}
${189:   ${190:output_logs}: ${191:"#"}}
${192:   ${193:paused}: ${194:"#"}}
${195:   ${196:pid_mode}: ${197:"#"}}
${198:   ${199:pids_limit}: ${200:"#"}}
${201:   ${202:privileged}: ${203:"#"}}
${204:   ${205:published_ports}: ${206:"#"}}
${207:   ${208:pull}: ${209:"#"}}
${210:   ${211:purge_networks}: ${212:"#"}}
${213:   ${214:read_only}: ${215:"#"}}
${216:   ${217:recreate}: ${218:"#"}}
${219:   ${220:restart}: ${221:"#"}}
${222:   ${223:restart_policy}: ${224:"#"}}
${225:   ${226:restart_retries}: ${227:"#"}}
${228:   ${229:runtime}: ${230:"#"}}
${231:   ${232:security_opts}: ${233:"#"}}
${234:   ${235:shm_size}: ${236:"#"}}
${237:   ${238:ssl_version}: ${239:"#"}}
${240:   ${241:state}: ${242:"#"}}
${243:   ${244:stop_signal}: ${245:"#"}}
${246:   ${247:stop_timeout}: ${248:"#"}}
${249:   ${250:sysctls}: ${251:"#"}}
${252:   ${253:timeout}: ${254:"#"}}
${255:   ${256:tls}: ${257:"#"}}
${258:   ${259:tls_hostname}: ${260:"#"}}
${261:   ${262:tmpfs}: ${263:"#"}}
${264:   ${265:trust_image_content}: ${266:"#"}}
${267:   ${268:tty}: ${269:"#"}}
${270:   ${271:ulimits}: ${272:"#"}}
${273:   ${274:user}: ${275:"#"}}
${276:   ${277:userns_mode}: ${278:"#"}}
${279:   ${280:uts}: ${281:"#"}}
${282:   ${283:validate_certs}: ${284:"#"}}
${285:   ${286:volume_driver}: ${287:"#"}}
${288:   ${289:volumes}: ${290:"#"}}
${291:   ${292:volumes_from}: ${293:"#"}}
${294:   ${295:working_dir}: ${296:"#"}}
${297:${298:   become: ${299:true}} 
${300:   become_method: ${301:su}} 
${302:   become_user: ${303:nobody}} 
${304:   become_flags: ${305:"-s /bin/sh"}}} 
${306:   when: ${307:variable is defined}} 
${308:   with_items: ${309:array}} 
]]></content>
	<tabTrigger>docker_container</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
