<snippet>
<content><![CDATA[
${1:# api_version: The version of the Docker API running on the 
# auto_remove: enable auto-removal of the container on daemon 
# blkio_weight: Block IO (relative weight), between 10 and 1000. 
# cacert_path: Use a CA certificate when performing server 
# cap_drop: List of capabilities to drop from the container. 
# capabilities: List of capabilities to add to the container. 
# cert_path: Path to the client's TLS certificate file. If 
# cleanup: Use with `detach=false' to remove the container 
# command: Command to execute when the container starts. A 
# cpu_period: Limit CPU CFS (Completely Fair Scheduler) period 
# cpu_quota: Limit CPU CFS (Completely Fair Scheduler) quota 
# cpu_shares: CPU shares (relative weight). 
# cpuset_cpus: CPUs in which to allow execution `1,3' or `1-3'. 
# cpuset_mems: Memory nodes (MEMs) in which to allow execution 
# debug: Debug mode 
# detach: Enable detached mode to leave the container 
# devices: List of host device bindings to add to the 
# dns_opts: list of DNS options 
# dns_search_domains: List of custom DNS search domains. 
# dns_servers: List of custom DNS servers. 
# docker_host: The URL or Unix socket path used to connect to 
# domainname: Container domainname. 
# entrypoint: Command that overwrites the default ENTRYPOINT 
# env: Dictionary of key,value pairs. Values which 
# env_file: Path to a file, present on the target, 
# etc_hosts: Dict of host-to-IP mappings, where each host 
# exposed_ports: List of additional container ports which informs 
# force_kill: Use the kill command when stopping a running 
# groups: List of additional group names and/or IDs that 
# hostname: Container hostname. 
# ignore_image: When `state' is `present' or `started' the 
# image: Repository path and tag used to create the 
# init: Run an init inside the container that forwards 
# interactive: Keep stdin open after a container is launched, 
# ipc_mode: Set the IPC mode for the container. Can be one 
# keep_volumes: Retain volumes associated with a removed 
# kernel_memory: Kernel memory limit (format: 
# key_path: Path to the client's TLS key file. If the value 
# kill_signal: Override default signal used to kill a running 
# labels: Dictionary of key value pairs. 
# links: List of name aliases for linked containers in 
# log_driver: Specify the logging driver. Docker uses `json- 
# log_options: Dictionary of options specific to the chosen 
# mac_address: Container MAC address (e.g. 92:d0:c6:0a:29:33) 
# memory: Memory limit (format: `<number>[<unit>]'). 
# memory_reservation: Memory soft limit (format: `<number>[<unit>]'). 
# memory_swap: Total memory limit (memory + swap, format: 
# memory_swappiness: Tune a container's memory swappiness behavior. 
# name: (required) Assign a name to a new container or 
# network_mode: Connect the container to a network. Choices are 
# networks: List of networks the container belongs to. For 
# oom_killer: Whether or not to disable OOM Killer for the 
# oom_score_adj: An integer value containing the score given to 
# output_logs: If set to true, output of the container command 
# paused: Use with the started state to pause running 
# pid_mode: Set the PID namespace mode for the container. 
# privileged: Give extended privileges to the container. 
# published_ports: List of ports to publish from the container to 
# pull: If true, always pull the latest version of an 
# purge_networks: Remove the container from ALL networks not 
# read_only: Mount the container's root file system as read- 
# recreate: Use with present and started states to force the 
# restart: Use with started state to force a matching 
# restart_policy: Container restart policy. Place quotes around 
# restart_retries: Use with restart policy to control maximum 
# security_opts: List of security options in the form of 
# shm_size: Size of `/dev/shm' (format: `<number>[<unit>]'). 
# ssl_version: Provide a valid SSL version number. Default 
# state: `absent' - A container matching the specified 
# stop_signal: Override default signal used to stop the 
# stop_timeout: Number of seconds to wait for the container to 
# sysctls: Dictionary of key,value pairs. 
# timeout: The maximum amount of time in seconds to wait on 
# tls: Secure the connection to the API by using TLS 
# tls_hostname: When verifying the authenticity of the Docker 
# tls_verify: Secure the connection to the API by using TLS 
# tmpfs: Mount a tmpfs directory 
# trust_image_content: If `yes', skip image verification. 
# tty: Allocate a pseudo-TTY. 
# ulimits: List of ulimit options. A ulimit is specified as 
# user: Sets the username or UID used and optionally the 
# userns_mode: Set the user namespace mode for the container. 
# uts: Set the UTS namespace mode for the container. 
# volume_driver: The container volume driver. 
# volumes: List of volumes to mount within the container. 
# volumes_from: List of container names or Ids to get volumes 
# working_dir: Path to the working directory. 
}- name: ${2:Name for docker_container module.}
  docker_container:
${3:   ${4:api_version}: ${5:"#"}}
${6:   ${7:auto_remove}: ${8:"#"}}
${9:   ${10:blkio_weight}: ${11:"#"}}
${12:   ${13:cacert_path}: ${14:"#"}}
${15:   ${16:cap_drop}: ${17:"#"}}
${18:   ${19:capabilities}: ${20:"#"}}
${21:   ${22:cert_path}: ${23:"#"}}
${24:   ${25:cleanup}: ${26:"#"}}
${27:   ${28:command}: ${29:"#"}}
${30:   ${31:cpu_period}: ${32:"#"}}
${33:   ${34:cpu_quota}: ${35:"#"}}
${36:   ${37:cpu_shares}: ${38:"#"}}
${39:   ${40:cpuset_cpus}: ${41:"#"}}
${42:   ${43:cpuset_mems}: ${44:"#"}}
${45:   ${46:debug}: ${47:"#"}}
${48:   ${49:detach}: ${50:"#"}}
${51:   ${52:devices}: ${53:"#"}}
${54:   ${55:dns_opts}: ${56:"#"}}
${57:   ${58:dns_search_domains}: ${59:"#"}}
${60:   ${61:dns_servers}: ${62:"#"}}
${63:   ${64:docker_host}: ${65:"#"}}
${66:   ${67:domainname}: ${68:"#"}}
${69:   ${70:entrypoint}: ${71:"#"}}
${72:   ${73:env}: ${74:"#"}}
${75:   ${76:env_file}: ${77:"#"}}
${78:   ${79:etc_hosts}: ${80:"#"}}
${81:   ${82:exposed_ports}: ${83:"#"}}
${84:   ${85:force_kill}: ${86:"#"}}
${87:   ${88:groups}: ${89:"#"}}
${90:   ${91:hostname}: ${92:"#"}}
${93:   ${94:ignore_image}: ${95:"#"}}
${96:   ${97:image}: ${98:"#"}}
${99:   ${100:init}: ${101:"#"}}
${102:   ${103:interactive}: ${104:"#"}}
${105:   ${106:ipc_mode}: ${107:"#"}}
${108:   ${109:keep_volumes}: ${110:"#"}}
${111:   ${112:kernel_memory}: ${113:"#"}}
${114:   ${115:key_path}: ${116:"#"}}
${117:   ${118:kill_signal}: ${119:"#"}}
${120:   ${121:labels}: ${122:"#"}}
${123:   ${124:links}: ${125:"#"}}
${126:   ${127:log_driver}: ${128:"#"}}
${129:   ${130:log_options}: ${131:"#"}}
${132:   ${133:mac_address}: ${134:"#"}}
${135:   ${136:memory}: ${137:"#"}}
${138:   ${139:memory_reservation}: ${140:"#"}}
${141:   ${142:memory_swap}: ${143:"#"}}
${144:   ${145:memory_swappiness}: ${146:"#"}}
${147:   ${148:name}: ${149:"#"}}
${150:   ${151:network_mode}: ${152:"#"}}
${153:   ${154:networks}: ${155:"#"}}
${156:   ${157:oom_killer}: ${158:"#"}}
${159:   ${160:oom_score_adj}: ${161:"#"}}
${162:   ${163:output_logs}: ${164:"#"}}
${165:   ${166:paused}: ${167:"#"}}
${168:   ${169:pid_mode}: ${170:"#"}}
${171:   ${172:privileged}: ${173:"#"}}
${174:   ${175:published_ports}: ${176:"#"}}
${177:   ${178:pull}: ${179:"#"}}
${180:   ${181:purge_networks}: ${182:"#"}}
${183:   ${184:read_only}: ${185:"#"}}
${186:   ${187:recreate}: ${188:"#"}}
${189:   ${190:restart}: ${191:"#"}}
${192:   ${193:restart_policy}: ${194:"#"}}
${195:   ${196:restart_retries}: ${197:"#"}}
${198:   ${199:security_opts}: ${200:"#"}}
${201:   ${202:shm_size}: ${203:"#"}}
${204:   ${205:ssl_version}: ${206:"#"}}
${207:   ${208:state}: ${209:"#"}}
${210:   ${211:stop_signal}: ${212:"#"}}
${213:   ${214:stop_timeout}: ${215:"#"}}
${216:   ${217:sysctls}: ${218:"#"}}
${219:   ${220:timeout}: ${221:"#"}}
${222:   ${223:tls}: ${224:"#"}}
${225:   ${226:tls_hostname}: ${227:"#"}}
${228:   ${229:tls_verify}: ${230:"#"}}
${231:   ${232:tmpfs}: ${233:"#"}}
${234:   ${235:trust_image_content}: ${236:"#"}}
${237:   ${238:tty}: ${239:"#"}}
${240:   ${241:ulimits}: ${242:"#"}}
${243:   ${244:user}: ${245:"#"}}
${246:   ${247:userns_mode}: ${248:"#"}}
${249:   ${250:uts}: ${251:"#"}}
${252:   ${253:volume_driver}: ${254:"#"}}
${255:   ${256:volumes}: ${257:"#"}}
${258:   ${259:volumes_from}: ${260:"#"}}
${261:   ${262:working_dir}: ${263:"#"}}
${264:${265:   become: ${266:true}} 
${267:   become_method: ${268:su}} 
${269:   become_user: ${270:nobody}} 
${271:   become_flags: ${272:"-s /bin/sh"}}} 
${273:   when: ${274:variable is defined}} 
${275:   with_items: ${276:array}} 
]]></content>
	<tabTrigger>docker_container</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
