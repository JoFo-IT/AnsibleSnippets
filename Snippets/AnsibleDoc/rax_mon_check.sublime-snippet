<snippet>
<content><![CDATA[
${1:#api_key = Rackspace API key (overrides `credentials')
#auth_endpoint = The URI of the authentication service
#check_type = The type of check to create. `remote.' checks may be created on any rax_mon_entity. `agent.' checks may only be
#credentials = File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
#details = Additional details specific to the check type. Must be a hash of strings between 1 and 255 characters long, or
#disabled = If "yes", ensure the check is created, but don't actually use it yet.
#entity_id = ID of the rax_mon_entity to target with this check.
#env = Environment as configured in ~/.pyrax.cfg, see
#https = pyrax-
#identity_type = Authentication machanism to use, such as rackspace or keystone
#label = Defines a label for this check, between 1 and 64 characters long.
#metadata = Hash of arbitrary key-value pairs to accompany this check if it fires. Keys and values must be strings between 1
#monitoring_zones_poll = Comma-separated list of the names of the monitoring zones the check should run from. Available monitoring zones
#period = The number of seconds between each time the check is performed. Must be greater than the minimum period set on
#region = Region to create an instance in
#state = Ensure that a check with this `label' exists or does not exist.
#target_alias = One of `target_alias` and `target_hostname` is required for remote.* checks, but prohibited for agent.* checks.
#target_hostname = One of `target_hostname` and `target_alias` is required for remote.* checks, but prohibited for agent.* checks.
#tenant_id = The tenant ID used for authentication
#tenant_name = The tenant name used for authentication
#timeout = The number of seconds this check will wait when attempting to collect results. Must be less than the period.
#username = Rackspace username (overrides `credentials')
#verify_ssl = Whether or not to require SSL validation of API endpoints
}- name: ${2:Name for rax_mon_check module.}
${3:  become: ${4:yes}}
  rax_mon_check: ${5:api_key=${6: } }${7:auth_endpoint=${8: } }${9:check_type=${10: } }${11:credentials=${12: } }${13:details=${14: } }${15:disabled=${16: } }${17:entity_id=${18: } }${19:env=${20: } }${21:https=${22: } }${23:identity_type=${24: } }${25:label=${26: } }${27:metadata=${28: } }${29:monitoring_zones_poll=${30: } }${31:period=${32: } }${33:region=${34: } }${35:state=${36: } }${37:target_alias=${38: } }${39:target_hostname=${40: } }${41:tenant_id=${42: } }${43:tenant_name=${44: } }${45:timeout=${46: } }${47:username=${48: } }${49:verify_ssl=${50: } }
${51:  when: ${52: variable is defined}}
${53:  with_items: ${54: array}}
]]></content>
	<tabTrigger>rax_mon_check</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
