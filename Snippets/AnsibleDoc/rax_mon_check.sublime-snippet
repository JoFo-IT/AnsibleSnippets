<snippet>
<content><![CDATA[
${1:# api_key: Rackspace API key, overrides `credentials'. 
# auth_endpoint: The URI of the authentication service. 
# check_type: (required) The type of check to create. `remote.' checks may be created on any rax_mon_entity. `agent.' 
# credentials: File to find the Rackspace credentials in. Ignored if `api_key' and `username' are provided. 
# details: Additional details specific to the check type. Must be a hash of strings between 1 and 255 characters 
# disabled: If "yes", ensure the check is created, but don't actually use it yet. 
# entity_id: (required) ID of the rax_mon_entity to target with this check. 
# env: Environment as configured in `~/.pyrax.cfg', see 
# : pyrax-configuration. 
# identity_type: Authentication mechanism to use, such as rackspace or keystone. 
# label: (required) Defines a label for this check, between 1 and 64 characters long. 
# metadata: Hash of arbitrary key-value pairs to accompany this check if it fires. Keys and values must be strings 
# monitoring_zones_poll: Comma-separated list of the names of the monitoring zones the check should run from. Available 
# period: The number of seconds between each time the check is performed. Must be greater than the minimum period 
# region: Region to create an instance in. 
# state: Ensure that a check with this `label' exists or does not exist. 
# target_alias: One of `target_alias` and `target_hostname` is required for remote.* checks, but prohibited for agent.* 
# target_hostname: One of `target_hostname` and `target_alias` is required for remote.* checks, but prohibited for agent.* 
# tenant_id: The tenant ID used for authentication. 
# tenant_name: The tenant name used for authentication. 
# timeout: The number of seconds this check will wait when attempting to collect results. Must be less than the 
# username: Rackspace username, overrides `credentials'. 
# verify_ssl: Whether or not to require SSL validation of API endpoints. 
}- name: ${2:Name for rax_mon_check module.}
  rax_mon_check:
${3:   ${4:api_key}: ${5:"#"}}
${6:   ${7:auth_endpoint}: ${8:"#"}}
${9:   ${10:check_type}: ${11:"#"}}
${12:   ${13:credentials}: ${14:"#"}}
${15:   ${16:details}: ${17:"#"}}
${18:   ${19:disabled}: ${20:"#"}}
${21:   ${22:entity_id}: ${23:"#"}}
${24:   ${25:env}: ${26:"#"}}
${27:   ${28:}: ${29:"#"}}
${30:   ${31:identity_type}: ${32:"#"}}
${33:   ${34:label}: ${35:"#"}}
${36:   ${37:metadata}: ${38:"#"}}
${39:   ${40:monitoring_zones_poll}: ${41:"#"}}
${42:   ${43:period}: ${44:"#"}}
${45:   ${46:region}: ${47:"#"}}
${48:   ${49:state}: ${50:"#"}}
${51:   ${52:target_alias}: ${53:"#"}}
${54:   ${55:target_hostname}: ${56:"#"}}
${57:   ${58:tenant_id}: ${59:"#"}}
${60:   ${61:tenant_name}: ${62:"#"}}
${63:   ${64:timeout}: ${65:"#"}}
${66:   ${67:username}: ${68:"#"}}
${69:   ${70:verify_ssl}: ${71:"#"}}
${72:${73:   become: ${74:true}} 
${75:   become_method: ${76:su}} 
${77:   become_user: ${78:nobody}} 
${79:   become_flags: ${80:"-s /bin/sh"}}} 
${81:   when: ${82:variable is defined}} 
${83:   with_items: ${84:array}} 
]]></content>
	<tabTrigger>rax_mon_check</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
