<snippet>
<content><![CDATA[
${1:# appflowlog: Enable logging of AppFlow information for the specified service group. 
# autoscale: Auto scale option for a servicegroup. 
# cacheable: Use the transparent cache redirection virtual server to forward the request to the cache server. Note: 
# cachetype: Cache type supported by the cache server. 
# cip: Insert the Client IP header in requests forwarded to the service. 
# cipheader: Name of the HTTP header whose value must be set to the IP address of the client. Used with the Client IP 
# cka: Enable client keep-alive for the service group. 
# clttimeout: Time, in seconds, after which to terminate an idle client connection. Minimum value = `0' Maximum value 
# cmp: Enable compression for the specified service. 
# comment: Any information about the service group. 
# disabled: When set to `yes' the service group state will be set to DISABLED. When set to `no' the service group 
# downstateflush: Flush all active transactions associated with all the services in the service group whose state 
# graceful: Wait for all existing connections to the service to terminate before shutting down the service. 
# healthmonitor: Monitor the health of this service. Available settings function as follows: `yes' - Send probes to check 
# httpprofilename: Name of the HTTP profile that contains HTTP configuration settings for the service group. Minimum length 
# maxbandwidth: Maximum bandwidth, in Kbps, allocated for all the services in the service group. Minimum value = `0' 
# maxclient: Maximum number of simultaneous open connections for the service group. Minimum value = `0' Maximum value 
# maxreq: Maximum number of requests that can be sent on a persistent connection to the service group. Note: 
# memberport: member port. 
# monitorbindings: A list of monitornames to bind to this service Note that the monitors must have already been setup 
# monthreshold: Minimum sum of weights of the monitors that are bound to this service. Used to determine whether to mark 
# netprofile: Network profile for the service group. Minimum length = 1 Maximum length = 127 
# nitro_pass: (required) The password with which to authenticate to the netscaler node. 
# nitro_protocol: Which protocol to use when accessing the nitro API objects. 
# nitro_timeout: Time in seconds until a timeout error is thrown when establishing a new session with Netscaler 
# nitro_user: (required) The username with which to authenticate to the netscaler node. 
# nsip: (required) The ip address of the netscaler appliance where the nitro API calls will be made. The port 
# pathmonitor: Path monitoring for clustering. 
# pathmonitorindv: Individual Path monitoring decisions. 
# rtspsessionidremap: Enable RTSP session ID mapping for the service group. 
# save_config: If true the module will save the configuration on the netscaler node if it makes any changes. The module 
# servicegroupname: Name of the service group. Must begin with an ASCII alphabetic or underscore `_' character, and must 
# contain: ', period `.', 
# servicemembers: A list of dictionaries describing each service member of the service group. 
# servicetype: Protocol used to exchange data with the service. 
# sp: Enable surge protection for the service group. 
# state: The state of the resource being configured by the module on the netscaler node. When present the 
# svrtimeout: Time, in seconds, after which to terminate an idle server connection. Minimum value = `0' Maximum value 
# tcpb: Enable TCP buffering for the service group. 
# tcpprofilename: Name of the TCP profile that contains TCP configuration settings for the service group. Minimum length = 
# useproxyport: Use the proxy port as the source port when initiating connections with the server. With the NO setting, 
# usip: Use client's IP address as the source IP address when initiating connection to the server. With the NO 
# validate_certs: If `no', SSL certificates will not be validated. This should only be used on personally controlled sites 
}- name: ${2:Name for netscaler_servicegroup module.}
  netscaler_servicegroup:
${3:   ${4:appflowlog}: ${5:"#"}}
${6:   ${7:autoscale}: ${8:"#"}}
${9:   ${10:cacheable}: ${11:"#"}}
${12:   ${13:cachetype}: ${14:"#"}}
${15:   ${16:cip}: ${17:"#"}}
${18:   ${19:cipheader}: ${20:"#"}}
${21:   ${22:cka}: ${23:"#"}}
${24:   ${25:clttimeout}: ${26:"#"}}
${27:   ${28:cmp}: ${29:"#"}}
${30:   ${31:comment}: ${32:"#"}}
${33:   ${34:disabled}: ${35:"#"}}
${36:   ${37:downstateflush}: ${38:"#"}}
${39:   ${40:graceful}: ${41:"#"}}
${42:   ${43:healthmonitor}: ${44:"#"}}
${45:   ${46:httpprofilename}: ${47:"#"}}
${48:   ${49:maxbandwidth}: ${50:"#"}}
${51:   ${52:maxclient}: ${53:"#"}}
${54:   ${55:maxreq}: ${56:"#"}}
${57:   ${58:memberport}: ${59:"#"}}
${60:   ${61:monitorbindings}: ${62:"#"}}
${63:   ${64:monthreshold}: ${65:"#"}}
${66:   ${67:netprofile}: ${68:"#"}}
${69:   ${70:nitro_pass}: ${71:"#"}}
${72:   ${73:nitro_protocol}: ${74:"#"}}
${75:   ${76:nitro_timeout}: ${77:"#"}}
${78:   ${79:nitro_user}: ${80:"#"}}
${81:   ${82:nsip}: ${83:"#"}}
${84:   ${85:pathmonitor}: ${86:"#"}}
${87:   ${88:pathmonitorindv}: ${89:"#"}}
${90:   ${91:rtspsessionidremap}: ${92:"#"}}
${93:   ${94:save_config}: ${95:"#"}}
${96:   ${97:servicegroupname}: ${98:"#"}}
${99:   ${100:contain}: ${101:"#"}}
${102:   ${103:servicemembers}: ${104:"#"}}
${105:   ${106:servicetype}: ${107:"#"}}
${108:   ${109:sp}: ${110:"#"}}
${111:   ${112:state}: ${113:"#"}}
${114:   ${115:svrtimeout}: ${116:"#"}}
${117:   ${118:tcpb}: ${119:"#"}}
${120:   ${121:tcpprofilename}: ${122:"#"}}
${123:   ${124:useproxyport}: ${125:"#"}}
${126:   ${127:usip}: ${128:"#"}}
${129:   ${130:validate_certs}: ${131:"#"}}
${132:${133:   become: ${134:true}} 
${135:   become_method: ${136:su}} 
${137:   become_user: ${138:nobody}} 
${139:   become_flags: ${140:"-s /bin/sh"}}} 
${141:   when: ${142:variable is defined}} 
${143:   with_items: ${144:array}} 
]]></content>
	<tabTrigger>netscaler_servicegroup</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
