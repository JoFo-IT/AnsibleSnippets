<snippet>
<content><![CDATA[
${1:# aggregate: Classifies the check as an aggregate check, making it available via the aggregate API 
# backup: Create a backup file (if yes), including the timestamp information so you can get the original file back 
# command: (required) Path to the sensu check to run (not required when `state=absent') 
# custom: A hash/dictionary of custom parameters for mixing to the configuration. You can't rewrite others module 
# dependencies: Other checks this check depends on, if dependencies fail, handling of this check will be disabled 
# handle: Whether the check should be handled or not 
# handlers: List of handlers to notify when the check fails 
# high_flap_threshold: The high threshold for flap detection 
# interval: Check interval in seconds 
# low_flap_threshold: The low threshold for flap detection 
# metric: Whether the check is a metric 
# name: (required) The name of the check This is the key that is used to determine whether a check exists 
# occurrences: Number of event occurrences before the handler should take action 
# path: Path to the json file of the check to be added/removed. Will be created if it does not exist (unless 
# publish: Whether the check should be scheduled at all. You can still issue it via the sensu api 
# refresh: Number of seconds handlers should wait before taking second action 
# source: The check source, used to create a JIT Sensu client for an external resource (e.g. a network switch). 
# standalone: Whether the check should be scheduled by the sensu client or server This option obviates the need for 
# state: Whether the check should be present or not 
# subdue_begin: When to disable handling of check failures 
# subdue_end: When to enable handling of check failures 
# subscribers: List of subscribers/channels this check should run for See sensu_subscribers to subscribe a machine to a 
# timeout: Timeout for the check 
# ttl: Time to live in seconds until the check is considered stale 
}- name: ${2:Name for sensu_check module.}
  sensu_check:
${3:   ${4:aggregate}: ${5:"#"}}
${6:   ${7:backup}: ${8:"#"}}
${9:   ${10:command}: ${11:"#"}}
${12:   ${13:custom}: ${14:"#"}}
${15:   ${16:dependencies}: ${17:"#"}}
${18:   ${19:handle}: ${20:"#"}}
${21:   ${22:handlers}: ${23:"#"}}
${24:   ${25:high_flap_threshold}: ${26:"#"}}
${27:   ${28:interval}: ${29:"#"}}
${30:   ${31:low_flap_threshold}: ${32:"#"}}
${33:   ${34:metric}: ${35:"#"}}
${36:   ${37:name}: ${38:"#"}}
${39:   ${40:occurrences}: ${41:"#"}}
${42:   ${43:path}: ${44:"#"}}
${45:   ${46:publish}: ${47:"#"}}
${48:   ${49:refresh}: ${50:"#"}}
${51:   ${52:source}: ${53:"#"}}
${54:   ${55:standalone}: ${56:"#"}}
${57:   ${58:state}: ${59:"#"}}
${60:   ${61:subdue_begin}: ${62:"#"}}
${63:   ${64:subdue_end}: ${65:"#"}}
${66:   ${67:subscribers}: ${68:"#"}}
${69:   ${70:timeout}: ${71:"#"}}
${72:   ${73:ttl}: ${74:"#"}}
${75:${76:   become: ${77:true}} 
${78:   become_method: ${79:su}} 
${80:   become_user: ${81:nobody}} 
${82:   become_flags: ${83:"-s /bin/sh"}}} 
${84:   when: ${85:variable is defined}} 
${86:   with_items: ${87:array}} 
]]></content>
	<tabTrigger>sensu_check</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
