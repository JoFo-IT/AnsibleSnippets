<snippet>
<content><![CDATA[
${1:# action: (required) The AWS Lambda action you want to 
# alias: Name of the function alias. Mutually exclusive 
# aws_access_key: AWS access key. If not set then the value of the 
# aws_secret_key: AWS secret key. If not set then the value of the 
# debug_botocore_endpoint_logs: Use a botocore.endpoint logger to parse the 
# ec2_url: Url to use to connect to EC2 or your Eucalyptus 
# event_source_token: Token string representing source ARN or account. 
# function_name: (required) Name of the Lambda function whose 
# principal: (required) The principal who is getting this 
# profile: Uses a boto profile. Only works with boto >= 
# region: The AWS region to use. If not specified then the 
# : ec2_region 
# security_token: AWS STS security token. If not set then the 
# source_account: The AWS account ID (without a hyphen) of the 
# source_arn: This is optional; however, when granting Amazon 
# state: (required) Describes the desired state. 
# statement_id: (required) A unique statement identifier. 
# validate_certs: When set to "no", SSL certificates will not be 
# version: Version of the Lambda function. Mutually 
}- name: ${2:Name for lambda_policy module.}
  lambda_policy:
${3:   ${4:action}: ${5:"#"}}
${6:   ${7:alias}: ${8:"#"}}
${9:   ${10:aws_access_key}: ${11:"#"}}
${12:   ${13:aws_secret_key}: ${14:"#"}}
${15:   ${16:debug_botocore_endpoint_logs}: ${17:"#"}}
${18:   ${19:ec2_url}: ${20:"#"}}
${21:   ${22:event_source_token}: ${23:"#"}}
${24:   ${25:function_name}: ${26:"#"}}
${27:   ${28:principal}: ${29:"#"}}
${30:   ${31:profile}: ${32:"#"}}
${33:   ${34:region}: ${35:"#"}}
${36:   ${37:}: ${38:"#"}}
${39:   ${40:security_token}: ${41:"#"}}
${42:   ${43:source_account}: ${44:"#"}}
${45:   ${46:source_arn}: ${47:"#"}}
${48:   ${49:state}: ${50:"#"}}
${51:   ${52:statement_id}: ${53:"#"}}
${54:   ${55:validate_certs}: ${56:"#"}}
${57:   ${58:version}: ${59:"#"}}
${60:${61:   become: ${62:true}} 
${63:   become_method: ${64:su}} 
${65:   become_user: ${66:nobody}} 
${67:   become_flags: ${68:"-s /bin/sh"}}} 
${69:   when: ${70:variable is defined}} 
${71:   with_items: ${72:array}} 
]]></content>
	<tabTrigger>lambda_policy</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
