<snippet>
<content><![CDATA[
${1:#append = If `yes', will only add groups, not set them to just the list in `groups'.
#comment = Optionally sets the description (aka `GECOS') of user account.
#createhome = Unless set to `no', a home directory will be made for the user when the account is created or if the home
#expires = An expiry time for the user in epoch, it will be ignored on platforms that do not support this. Currently
#force = When used with `state=absent', behavior is as with `userdel --force'.
#generate_ssh_key = Whether to generate a SSH key for the user in question. This will *not* overwrite an existing SSH key.
#group = Optionally sets the user's primary group (takes a group name).
#groups = Puts the user in this comma-delimited list of groups. When set to the empty string ('groups='), the user is
#home = Optionally set the user's home directory.
#login_class = Optionally sets the user's login class for FreeBSD, OpenBSD and NetBSD systems.
#move_home = If set to `yes' when used with `home=', attempt to move the user's home directory to the specified directory if
#name = Name of the user to create, remove or modify.
#non_unique = Optionally when used with the -u option, this option allows to change the user ID to a non-unique value.
#password = Optionally set the user's password to this crypted value.  See the user example in the github examples directory
#http = how-do-i-generate-crypted-passwords-for-
#remove = When used with `state=absent', behavior is as with `userdel --remove'.
#shell = Optionally set the user's shell.
#skeleton = Optionally set a home skeleton directory. Requires createhome option!
#ssh_key_bits = Optionally specify number of bits in SSH key to create.
#ssh_key_comment = Optionally define the comment for the SSH key.
#ssh_key_file = Optionally specify the SSH key filename. If this is a relative filename then it will be relative to the user's
#ssh_key_passphrase = Set a passphrase for the SSH key.  If no passphrase is provided, the SSH key will default to having no
#ssh_key_type = Optionally specify the type of SSH key to generate. Available SSH key types will depend on implementation
#state = Whether the account should exist or not, taking action if the state is different from what is stated.
#system = When creating an account, setting this to `yes' makes the user a system account.  This setting cannot be changed
#uid = Optionally sets the `UID' of the user.
#update_password = `always' will update passwords if they differ.  `on_create' will only set the password for newly created users.
}- name: ${2:Name for user module.}
${3:  become: ${4:yes}}
  user: ${5:append=${6: } }${7:comment=${8: } }${9:createhome=${10: } }${11:expires=${12: } }${13:force=${14: } }${15:generate_ssh_key=${16: } }${17:group=${18: } }${19:groups=${20: } }${21:home=${22: } }${23:login_class=${24: } }${25:move_home=${26: } }${27:name=${28: } }${29:non_unique=${30: } }${31:password=${32: } }${33:http=${34: } }${35:remove=${36: } }${37:shell=${38: } }${39:skeleton=${40: } }${41:ssh_key_bits=${42: } }${43:ssh_key_comment=${44: } }${45:ssh_key_file=${46: } }${47:ssh_key_passphrase=${48: } }${49:ssh_key_type=${50: } }${51:state=${52: } }${53:system=${54: } }${55:uid=${56: } }${57:update_password=${58: } }
${59:  when: ${60: variable is defined}}
${61:  with_items: ${62: array}}
]]></content>
	<tabTrigger>user</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
