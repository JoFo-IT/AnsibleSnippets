<snippet>
<content><![CDATA[
${1:# availability_zone: Specify an availability zone to use the default 
# aws_access_key: AWS access key. If not set then the value of the 
# aws_secret_key: AWS secret key. If not set then the value of the 
# cpu_credit_specification: For T2 series instances, choose whether to allow 
# cpu_options: Reduce the number of vCPU exposed to the 
# debug_botocore_endpoint_logs: Use a botocore.endpoint logger to parse the 
# detailed_monitoring: Whether to allow detailed cloudwatch metrics to 
# ebs_optimized: Whether instance is should use optimized EBS 
# ec2_url: Url to use to connect to EC2 or your Eucalyptus 
# filters: A dict of filters to apply when deciding whether 
# image: An image to use for the instance. The 
# image_id: `ami' ID to use for the instance. One of `image' 
# instance_ids: If you specify one or more instance IDs, only 
# instance_initiated_shutdown_behavior: Whether to stop or terminate an instance upon 
# instance_role: The ARN or name of an EC2-enabled instance role 
# instance_type: Instance type to use for the instance, see https 
# key_name: Name of the SSH access key to assign to the 
# launch_template: The EC2 launch template to base instance 
# name: The Name tag for the instance. 
# network: Either a dictionary containing the key 
# placement_group: The placement group that needs to be assigned to 
# profile: Uses a boto profile. Only works with boto >= 
# purge_tags: Delete any tags not specified in the task that 
# region: The AWS region to use. If not specified then the 
# : ec2_region 
# security_group: A security group ID or name. Mutually exclusive 
# security_groups: A list of security group IDs or names (strings). 
# security_token: AWS STS security token. If not set then the 
# state: Goal state for the instances. 
# tags: A hash/dictionary of tags to add to the new 
# tenancy: What type of tenancy to allow an instance to 
# termination_protection: Whether to enable termination protection. This 
# tower_callback: Preconfigured user-data to enable an instance to 
# user_data: Opaque blob of data which is made available to 
# validate_certs: When set to "no", SSL certificates will not be 
# volumes: A list of block device mappings, by default this 
# vpc_subnet_id: The subnet ID in which to launch the instance 
# wait: Whether or not to wait for the desired state 
# wait_timeout: How long to wait (in seconds) for the instance 
}- name: ${2:Name for ec2_instance module.}
  ec2_instance:
${3:   ${4:availability_zone}: ${5:"#"}}
${6:   ${7:aws_access_key}: ${8:"#"}}
${9:   ${10:aws_secret_key}: ${11:"#"}}
${12:   ${13:cpu_credit_specification}: ${14:"#"}}
${15:   ${16:cpu_options}: ${17:"#"}}
${18:   ${19:debug_botocore_endpoint_logs}: ${20:"#"}}
${21:   ${22:detailed_monitoring}: ${23:"#"}}
${24:   ${25:ebs_optimized}: ${26:"#"}}
${27:   ${28:ec2_url}: ${29:"#"}}
${30:   ${31:filters}: ${32:"#"}}
${33:   ${34:image}: ${35:"#"}}
${36:   ${37:image_id}: ${38:"#"}}
${39:   ${40:instance_ids}: ${41:"#"}}
${42:   ${43:instance_initiated_shutdown_behavior}: ${44:"#"}}
${45:   ${46:instance_role}: ${47:"#"}}
${48:   ${49:instance_type}: ${50:"#"}}
${51:   ${52:key_name}: ${53:"#"}}
${54:   ${55:launch_template}: ${56:"#"}}
${57:   ${58:name}: ${59:"#"}}
${60:   ${61:network}: ${62:"#"}}
${63:   ${64:placement_group}: ${65:"#"}}
${66:   ${67:profile}: ${68:"#"}}
${69:   ${70:purge_tags}: ${71:"#"}}
${72:   ${73:region}: ${74:"#"}}
${75:   ${76:}: ${77:"#"}}
${78:   ${79:security_group}: ${80:"#"}}
${81:   ${82:security_groups}: ${83:"#"}}
${84:   ${85:security_token}: ${86:"#"}}
${87:   ${88:state}: ${89:"#"}}
${90:   ${91:tags}: ${92:"#"}}
${93:   ${94:tenancy}: ${95:"#"}}
${96:   ${97:termination_protection}: ${98:"#"}}
${99:   ${100:tower_callback}: ${101:"#"}}
${102:   ${103:user_data}: ${104:"#"}}
${105:   ${106:validate_certs}: ${107:"#"}}
${108:   ${109:volumes}: ${110:"#"}}
${111:   ${112:vpc_subnet_id}: ${113:"#"}}
${114:   ${115:wait}: ${116:"#"}}
${117:   ${118:wait_timeout}: ${119:"#"}}
${120:${121:   become: ${122:true}} 
${123:   become_method: ${124:su}} 
${125:   become_user: ${126:nobody}} 
${127:   become_flags: ${128:"-s /bin/sh"}}} 
${129:   when: ${130:variable is defined}} 
${131:   with_items: ${132:array}} 
]]></content>
	<tabTrigger>ec2_instance</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
