<snippet>
<content><![CDATA[
${1:#availability_zones = List of availability zone names in which to create the group.  Defaults to all the availability zones in the
#aws_access_key = AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment
#aws_secret_key = AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY
#default_cooldown = The number of seconds after a scaling activity completes before another can begin.
#desired_capacity = Desired number of instances in group, if unspecified then the current group value will be used.
#ec2_url = Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints).  Ignored
#health_check_period = Length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its
#health_check_type = The service you want the health status from, Amazon EC2 or Elastic Load Balancer.
#launch_config_name = Name of the Launch configuration to use for the group. See the ec2_lc module for managing these.
#lc_check = Check to make sure instances that are being replaced with replace_instances do not aready have the current
#load_balancers = List of ELB names to use for the group
#max_size = Maximum number of instances in group, if unspecified then the current group value will be used.
#min_size = Minimum number of instances in group, if unspecified then the current group value will be used.
#name = Unique name for group to be created or deleted
#profile = uses a boto profile. Only works with boto >= 2.24.0
#region = The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if
#http = ec2_region
#replace_all_instances = In a rolling fashion, replace all instances with an old launch configuration with one from the current launch
#replace_batch_size = Number of instances you'd like to replace at a time.  Used with replace_all_instances.
#replace_instances = List of instance_ids belonging to the named ASG that you would like to terminate and be replaced with instances
#security_token = AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment
#state = register or deregister the instance
#tags = A list of tags to add to the Auto Scale Group. Optional key is 'propagate_at_launch', which defaults to true.
#termination_policies = An ordered list of criteria used for selecting instances to be removed from the Auto Scaling group when reducing
#validate_certs = When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
#vpc_zone_identifier = List of VPC subnets to use
#wait_for_instances = Wait for the ASG instances to be in a ready state before exiting.  If instances are behind an ELB, it will wait
#wait_timeout = how long before wait instances to become viable when replaced.  Used in concjunction with instance_ids option.
}- name: ${2:Name for ec2_asg module.}
${3:  become: ${4:yes}}
  ec2_asg: ${5:availability_zones=${6: } }${7:aws_access_key=${8: } }${9:aws_secret_key=${10: } }${11:default_cooldown=${12: } }${13:desired_capacity=${14: } }${15:ec2_url=${16: } }${17:health_check_period=${18: } }${19:health_check_type=${20: } }${21:launch_config_name=${22: } }${23:lc_check=${24: } }${25:load_balancers=${26: } }${27:max_size=${28: } }${29:min_size=${30: } }${31:name=${32: } }${33:profile=${34: } }${35:region=${36: } }${37:http=${38: } }${39:replace_all_instances=${40: } }${41:replace_batch_size=${42: } }${43:replace_instances=${44: } }${45:security_token=${46: } }${47:state=${48: } }${49:tags=${50: } }${51:termination_policies=${52: } }${53:validate_certs=${54: } }${55:vpc_zone_identifier=${56: } }${57:wait_for_instances=${58: } }${59:wait_timeout=${60: } }
${61:  when: ${62: variable is defined}}
${63:  with_items: ${64: array}}
]]></content>
	<tabTrigger>ec2_asg</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
