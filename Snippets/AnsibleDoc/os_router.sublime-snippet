<snippet>
<content><![CDATA[
${1:# admin_state_up: Desired admin state of the created or existing 
# api_timeout: How long should the socket layer wait before 
# auth: Dictionary containing auth information as needed 
# auth_type: Name of the auth plugin to use. If the cloud 
# availability_zone: Ignored. Present for backwards compatibility 
# cacert: A path to a CA Cert bundle that can be used as 
# cert: A path to a client certificate to use as part of 
# cloud: Named cloud or cloud config to operate against. 
# enable_snat: Enable Source NAT (SNAT) attribute. 
# external_fixed_ips: The IP address parameters for the external 
# interface: Endpoint URL type to fetch from the service 
# interfaces: List of subnets to attach to the router internal 
# key: A path to a client key to use as part of the SSL 
# name: (required) Name to be give to the router 
# network: Unique name or ID of the external gateway 
# project: Unique name or ID of the project. 
# region_name: Name of the region. 
# state: Indicate desired state of the resource 
# timeout: How long should ansible wait for the requested 
# verify: Whether or not SSL API requests should be 
# wait: Should ansible wait until the requested resource 
}- name: ${2:Name for os_router module.}
  os_router:
${3:   ${4:admin_state_up}: ${5:"#"}}
${6:   ${7:api_timeout}: ${8:"#"}}
${9:   ${10:auth}: ${11:"#"}}
${12:   ${13:auth_type}: ${14:"#"}}
${15:   ${16:availability_zone}: ${17:"#"}}
${18:   ${19:cacert}: ${20:"#"}}
${21:   ${22:cert}: ${23:"#"}}
${24:   ${25:cloud}: ${26:"#"}}
${27:   ${28:enable_snat}: ${29:"#"}}
${30:   ${31:external_fixed_ips}: ${32:"#"}}
${33:   ${34:interface}: ${35:"#"}}
${36:   ${37:interfaces}: ${38:"#"}}
${39:   ${40:key}: ${41:"#"}}
${42:   ${43:name}: ${44:"#"}}
${45:   ${46:network}: ${47:"#"}}
${48:   ${49:project}: ${50:"#"}}
${51:   ${52:region_name}: ${53:"#"}}
${54:   ${55:state}: ${56:"#"}}
${57:   ${58:timeout}: ${59:"#"}}
${60:   ${61:verify}: ${62:"#"}}
${63:   ${64:wait}: ${65:"#"}}
${66:${67:   become: ${68:true}} 
${69:   become_method: ${70:su}} 
${71:   become_user: ${72:nobody}} 
${73:   become_flags: ${74:"-s /bin/sh"}}} 
${75:   when: ${76:variable is defined}} 
${77:   with_items: ${78:array}} 
]]></content>
	<tabTrigger>os_router</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
