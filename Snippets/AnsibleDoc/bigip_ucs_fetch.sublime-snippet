<snippet>
<content><![CDATA[
${1:# backup: Create a backup file including the timestamp 
# create_on_missing: Creates the UCS based on the value of `src' if 
# dest: (required) A directory to save the UCS file 
# encryption_password: Password to use to encrypt the UCS file if 
# fail_on_missing: Make the module fail if the UCS file on the 
# force: If `no', the file will only be transferred if 
# provider: A dict object containing connection details. 
# src: The name of the UCS file to create on the remote 
}- name: ${2:Name for bigip_ucs_fetch module.}
  bigip_ucs_fetch:
${3:   ${4:backup}: ${5:"#"}}
${6:   ${7:create_on_missing}: ${8:"#"}}
${9:   ${10:dest}: ${11:"#"}}
${12:   ${13:encryption_password}: ${14:"#"}}
${15:   ${16:fail_on_missing}: ${17:"#"}}
${18:   ${19:force}: ${20:"#"}}
${21:   ${22:provider}: ${23:"#"}}
${24:   ${25:src}: ${26:"#"}}
${27:${28:   become: ${29:true}} 
${30:   become_method: ${31:su}} 
${32:   become_user: ${33:nobody}} 
${34:   become_flags: ${35:"-s /bin/sh"}}} 
${36:   when: ${37:variable is defined}} 
${38:   with_items: ${39:array}} 
]]></content>
	<tabTrigger>bigip_ucs_fetch</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
