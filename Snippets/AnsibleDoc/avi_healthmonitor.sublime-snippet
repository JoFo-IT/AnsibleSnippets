<snippet>
<content><![CDATA[
${1:# api_context: Avi API context that includes current session ID 
# api_version: Avi API version of to use for Avi API and 
# avi_api_patch_op: Patch operation to use when using 
# avi_api_update_method: Default method for object update is HTTP PUT. 
# avi_credentials: Avi Credentials dictionary which can be used in 
# controller: IP address or hostname of the controller. The 
# description: User defined description for the object. 
# dns_monitor: Healthmonitordns settings for healthmonitor. 
# external_monitor: Healthmonitorexternal settings for 
# failed_checks: Number of continuous failed health checks before 
# http_monitor: Healthmonitorhttp settings for healthmonitor. 
# https_monitor: Healthmonitorhttp settings for healthmonitor. 
# is_federated: This field describes the object's replication 
# monitor_port: Use this port instead of the port defined for 
# name: (required) A user friendly name for this health 
# password: Password of Avi user in Avi controller. The 
# receive_timeout: A valid response from the server is expected 
# send_interval: Frequency, in seconds, that monitors are sent to 
# state: The state that should be applied on the entity. 
# successful_checks: Number of continuous successful health checks 
# tcp_monitor: Healthmonitortcp settings for healthmonitor. 
# tenant: Name of tenant used for all Avi API calls and 
# tenant_ref: It is a reference to an object of type tenant. 
# tenant_uuid: UUID of tenant used for all Avi API calls and 
# type: (required) Type of the health monitor. Enum 
# udp_monitor: Healthmonitorudp settings for healthmonitor. 
# url: Avi controller URL of the object. 
# username: Username used for accessing Avi controller. The 
# uuid: Uuid of the health monitor. 
}- name: ${2:Name for avi_healthmonitor module.}
  avi_healthmonitor:
${3:   ${4:api_context}: ${5:"#"}}
${6:   ${7:api_version}: ${8:"#"}}
${9:   ${10:avi_api_patch_op}: ${11:"#"}}
${12:   ${13:avi_api_update_method}: ${14:"#"}}
${15:   ${16:avi_credentials}: ${17:"#"}}
${18:   ${19:controller}: ${20:"#"}}
${21:   ${22:description}: ${23:"#"}}
${24:   ${25:dns_monitor}: ${26:"#"}}
${27:   ${28:external_monitor}: ${29:"#"}}
${30:   ${31:failed_checks}: ${32:"#"}}
${33:   ${34:http_monitor}: ${35:"#"}}
${36:   ${37:https_monitor}: ${38:"#"}}
${39:   ${40:is_federated}: ${41:"#"}}
${42:   ${43:monitor_port}: ${44:"#"}}
${45:   ${46:name}: ${47:"#"}}
${48:   ${49:password}: ${50:"#"}}
${51:   ${52:receive_timeout}: ${53:"#"}}
${54:   ${55:send_interval}: ${56:"#"}}
${57:   ${58:state}: ${59:"#"}}
${60:   ${61:successful_checks}: ${62:"#"}}
${63:   ${64:tcp_monitor}: ${65:"#"}}
${66:   ${67:tenant}: ${68:"#"}}
${69:   ${70:tenant_ref}: ${71:"#"}}
${72:   ${73:tenant_uuid}: ${74:"#"}}
${75:   ${76:type}: ${77:"#"}}
${78:   ${79:udp_monitor}: ${80:"#"}}
${81:   ${82:url}: ${83:"#"}}
${84:   ${85:username}: ${86:"#"}}
${87:   ${88:uuid}: ${89:"#"}}
${90:${91:   become: ${92:true}} 
${93:   become_method: ${94:su}} 
${95:   become_user: ${96:nobody}} 
${97:   become_flags: ${98:"-s /bin/sh"}}} 
${99:   when: ${100:variable is defined}} 
${101:   with_items: ${102:array}} 
]]></content>
	<tabTrigger>avi_healthmonitor</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
