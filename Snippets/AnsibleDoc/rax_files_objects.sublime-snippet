<snippet>
<content><![CDATA[
${1:#api_key = Rackspace API key (overrides `credentials')
#clear_meta = Optionally clear existing metadata when applying metadata to existing objects. Selecting this option is only
#container = The container to use for file object operations.
#credentials = File to find the Rackspace credentials in (ignored if `api_key' and `username' are provided)
#dest = The destination of a "get" operation; i.e. a local directory, "/home/user/myfolder". Used to specify the
#env = Environment as configured in ~/.pyrax.cfg, see
#https = pyrax-
#expires = Used to set an expiration on a file or folder uploaded to Cloud Files. Requires an integer, specifying
#meta = A hash of items to set as metadata values on an uploaded file or folder
#method = The method of operation to be performed.  For example, put to upload files to Cloud Files, get to download files
#region = Region to create an instance in
#src = Source from which to upload files.  Used to specify a remote object as a source for an operation, i.e. a file
#state = Indicate desired state of the resource
#structure = Used to specify whether to maintain nested directory structure when downloading objects from Cloud Files.
#type = Type of object to do work on Metadata object or a file object
#username = Rackspace username (overrides `credentials')
#verify_ssl = Whether or not to require SSL validation of API endpoints
}- name: ${2:Name for rax_files_objects module.}
${3:  become: ${4:yes}}
  rax_files_objects: ${5:api_key=${6: } }${7:clear_meta=${8: } }${9:container=${10: } }${11:credentials=${12: } }${13:dest=${14: } }${15:env=${16: } }${17:https=${18: } }${19:expires=${20: } }${21:meta=${22: } }${23:method=${24: } }${25:region=${26: } }${27:src=${28: } }${29:state=${30: } }${31:structure=${32: } }${33:type=${34: } }${35:username=${36: } }${37:verify_ssl=${38: } }
${39:  when: ${40: variable is defined}}
${41:  with_items: ${42: array}}
]]></content>
	<tabTrigger>rax_files_objects</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
