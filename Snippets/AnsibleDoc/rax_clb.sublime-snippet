<snippet>
<content><![CDATA[
${1:# algorithm: algorithm for the balancer being created 
# api_key: Rackspace API key, overrides `credentials'. 
# credentials: File to find the Rackspace credentials in. Ignored if `api_key' and `username' are provided. 
# env: Environment as configured in `~/.pyrax.cfg', see 
# : pyrax-configuration. 
# meta: A hash of metadata to associate with the instance 
# name: Name to give the load balancer 
# port: Port for the balancer being created 
# protocol: Protocol for the balancer being created 
# region: Region to create an instance in. 
# state: Indicate desired state of the resource 
# timeout: timeout for communication between the balancer and the node 
# type: type of interface for the balancer being created 
# username: Rackspace username, overrides `credentials'. 
# verify_ssl: Whether or not to require SSL validation of API endpoints. 
# vip_id: Virtual IP ID to use when creating the load balancer for purposes of sharing an IP with another load 
# wait: wait for the balancer to be in state 'running' before returning 
# wait_timeout: how long before wait gives up, in seconds 
}- name: ${2:Name for rax_clb module.}
  rax_clb:
${3:   ${4:algorithm}: ${5:"#"}}
${6:   ${7:api_key}: ${8:"#"}}
${9:   ${10:credentials}: ${11:"#"}}
${12:   ${13:env}: ${14:"#"}}
${15:   ${16:}: ${17:"#"}}
${18:   ${19:meta}: ${20:"#"}}
${21:   ${22:name}: ${23:"#"}}
${24:   ${25:port}: ${26:"#"}}
${27:   ${28:protocol}: ${29:"#"}}
${30:   ${31:region}: ${32:"#"}}
${33:   ${34:state}: ${35:"#"}}
${36:   ${37:timeout}: ${38:"#"}}
${39:   ${40:type}: ${41:"#"}}
${42:   ${43:username}: ${44:"#"}}
${45:   ${46:verify_ssl}: ${47:"#"}}
${48:   ${49:vip_id}: ${50:"#"}}
${51:   ${52:wait}: ${53:"#"}}
${54:   ${55:wait_timeout}: ${56:"#"}}
${57:${58:   become: ${59:true}} 
${60:   become_method: ${61:su}} 
${62:   become_user: ${63:nobody}} 
${64:   become_flags: ${65:"-s /bin/sh"}}} 
${66:   when: ${67:variable is defined}} 
${68:   with_items: ${69:array}} 
]]></content>
	<tabTrigger>rax_clb</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
