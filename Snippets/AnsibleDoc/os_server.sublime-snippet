<snippet>
<content><![CDATA[
${1:#api_timeout = How long should the socket layer wait before timing out for API calls. If this is omitted, nothing will be
#auth = Dictionary containing auth information as needed by the cloud's auth plugin strategy. For the default `password'
#auth_type = Name of the auth plugin to use. If the cloud uses something other than password authentication, the name of the
#auto_ip = Ensure instance has public ip however the cloud wants to do that
#availability_zone = Name of the availability zone.
#boot_from_volume = Should the instance boot from a persistent volume created based on the image given. Mututally exclusive with
#boot_volume = Volume name or id to use as the volume to boot from. Implies boot_from_volume. Mutually exclusive with image and
#cacert = A path to a CA Cert bundle that can be used as part of verifying SSL API requests.
#cert = A path to a client certificate to use as part of the SSL transaction
#cloud = Named cloud to operate against. Provides default values for `auth' and `auth_type'. This parameter is not needed
#config_drive = Whether to boot the server with config drive enabled
#endpoint_type = Endpoint URL type to fetch from the service catalog.
#flavor = The name or id of the flavor in which the new instance has to be created. Mutually exclusive with flavor_ram
#flavor_include = Text to use to filter flavor names, for the case, such as Rackspace, where there are multiple flavors that have
#flavor_ram = The minimum amount of ram in MB that the flavor in which the new instance has to be created must have. Mutually
#floating_ip_pools = list of floating IP pools from which to choose a floating IP
#floating_ips = list of valid floating IPs that pre-exist to assign to this node
#image = The name or id of the base image to boot.
#image_exclude = Text to use to filter image names, for the case, such as HP, where there are multiple image names matching the
#key = A path to a client key to use as part of the SSL transaction
#key_name = The key pair name to be used when creating a instance
#meta = A list of key value pairs that should be provided as a metadata to the new instance or a string containing a
#name = Name that has to be given to the instance
#network = Name or ID of a network to attach this instance to. A simpler version of the nics parameter, only one of network
#nics = A list of networks to which the instance's interface should be attached. Networks may be referenced by net-id
#region_name = Name of the region.
#security_groups = Names of the security groups to which the instance should be added. This may be a YAML list or a comma separated
#state = Should the resource be present or absent.
#terminate_volume = If true, delete volume when deleting instance (if booted from volume)
#timeout = How long should ansible wait for the requested resource.
#userdata = Opaque blob of data which is made available to the instance
#validate_certs = Whether or not SSL API requests should be verified.
#volume_size = The size of the volume to create in GB if booting from volume based on an image.
#volumes = A list of preexisting volumes names or ids to attach to the instance
#wait = Should ansible wait until the requested resource is complete.
}- name: ${2:Name for os_server module.}
${3:  become: ${4:yes}}
  os_server: ${5:api_timeout=${6: } }${7:auth=${8: } }${9:auth_type=${10: } }${11:auto_ip=${12: } }${13:availability_zone=${14: } }${15:boot_from_volume=${16: } }${17:boot_volume=${18: } }${19:cacert=${20: } }${21:cert=${22: } }${23:cloud=${24: } }${25:config_drive=${26: } }${27:endpoint_type=${28: } }${29:flavor=${30: } }${31:flavor_include=${32: } }${33:flavor_ram=${34: } }${35:floating_ip_pools=${36: } }${37:floating_ips=${38: } }${39:image=${40: } }${41:image_exclude=${42: } }${43:key=${44: } }${45:key_name=${46: } }${47:meta=${48: } }${49:name=${50: } }${51:network=${52: } }${53:nics=${54: } }${55:region_name=${56: } }${57:security_groups=${58: } }${59:state=${60: } }${61:terminate_volume=${62: } }${63:timeout=${64: } }${65:userdata=${66: } }${67:validate_certs=${68: } }${69:volume_size=${70: } }${71:volumes=${72: } }${73:wait=${74: } }
${75:  when: ${76: variable is defined}}
${77:  with_items: ${78: array}}
]]></content>
	<tabTrigger>os_server</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
