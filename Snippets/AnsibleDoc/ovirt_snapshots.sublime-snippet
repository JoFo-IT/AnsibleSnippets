<snippet>
<content><![CDATA[
${1:# auth: (required) Dictionary with values needed to create HTTP/HTTPS connection to oVirt: 
# description: Description of the snapshot. 
# fetch_nested: If `True' the module will fetch additional data from the API. It will fetch IDs of the VMs disks, 
# nested_attributes: Specifies list of the attributes which should be fetched from the API. This parameter apply only when 
# poll_interval: Number of the seconds the module waits until another poll request on entity status is sent. 
# snapshot_id: ID of the snapshot to manage. 
# state: Should the Virtual Machine snapshot be restore/present/absent. 
# timeout: The amount of time in seconds the module should wait for the instance to get into desired state. 
# use_memory: If `true' and `state' is `present' save memory of the Virtual Machine if it's running. If `true' and 
# vm_name: (required) Name of the Virtual Machine to manage. 
# wait: `True' if the module should wait for the entity to get into desired state. 
}- name: ${2:Name for ovirt_snapshots module.}
  ovirt_snapshots:
${3:   ${4:auth}: ${5:"#"}}
${6:   ${7:description}: ${8:"#"}}
${9:   ${10:fetch_nested}: ${11:"#"}}
${12:   ${13:nested_attributes}: ${14:"#"}}
${15:   ${16:poll_interval}: ${17:"#"}}
${18:   ${19:snapshot_id}: ${20:"#"}}
${21:   ${22:state}: ${23:"#"}}
${24:   ${25:timeout}: ${26:"#"}}
${27:   ${28:use_memory}: ${29:"#"}}
${30:   ${31:vm_name}: ${32:"#"}}
${33:   ${34:wait}: ${35:"#"}}
${36:${37:   become: ${38:true}} 
${39:   become_method: ${40:su}} 
${41:   become_user: ${42:nobody}} 
${43:   become_flags: ${44:"-s /bin/sh"}}} 
${45:   when: ${46:variable is defined}} 
${47:   with_items: ${48:array}} 
]]></content>
	<tabTrigger>ovirt_snapshots</tabTrigger>
	<scope>source.yaml,source.ansible</scope>
</snippet>
